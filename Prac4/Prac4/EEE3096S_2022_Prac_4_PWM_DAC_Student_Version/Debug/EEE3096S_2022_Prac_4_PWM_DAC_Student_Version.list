
EEE3096S_2022_Prac_4_PWM_DAC_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b20  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c10  08002c10  00020610  2**0
                  CONTENTS
  4 .ARM          00000000  08002c10  08002c10  00020610  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c10  08002c10  00020610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c14  08002c14  00012c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000610  20000000  08002c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000610  08003228  00020610  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  08003228  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020610  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084ed  00000000  00000000  00020638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b6  00000000  00000000  00028b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  0002a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002ab30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ed5  00000000  00000000  0002b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a478  00000000  00000000  0003c29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068a59  00000000  00000000  00046715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af16e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002128  00000000  00000000  000af1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000610 	.word	0x20000610
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bc8 	.word	0x08002bc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000614 	.word	0x20000614
 8000104:	08002bc8 	.word	0x08002bc8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb89 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f831 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f995 	bl	800055c <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f975 	bl	8000520 <MX_DMA_Init>
  MX_TIM2_Init();
 8000236:	f000 f875 	bl	8000324 <MX_TIM2_Init>
  MX_TIM3_Init();
 800023a:	f000 f8f1 	bl	8000420 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //TO DO:
  //TASK 4
  //Start TIM3 in PWM mode on channel 1
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800023e:	4b0f      	ldr	r3, [pc, #60]	; (800027c <main+0x5c>)
 8000240:	2100      	movs	r1, #0
 8000242:	0018      	movs	r0, r3
 8000244:	f001 fe52 	bl	8001eec <HAL_TIM_PWM_Start>

  //Start TIM2 in Output Compare (OC) mode on channel 1.
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <main+0x60>)
 800024a:	2100      	movs	r1, #0
 800024c:	0018      	movs	r0, r3
 800024e:	f001 fd3d 	bl	8001ccc <HAL_TIM_OC_Start>

  //Start the DMA in interrupt (IT) mode.
  uint32_t SrcAddress =  (uint32_t) &sin_LUT;
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <main+0x64>)
 8000254:	607b      	str	r3, [r7, #4]
  uint32_t DstAddress = (uint32_t) &(TIM3->CCR1);
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <main+0x68>)
 8000258:	603b      	str	r3, [r7, #0]
  HAL_DMA_Start_IT(&hdma_tim2_ch1, SrcAddress, DstAddress, NS);
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	6879      	ldr	r1, [r7, #4]
 800025e:	480b      	ldr	r0, [pc, #44]	; (800028c <main+0x6c>)
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	f000 fcf5 	bl	8000c50 <HAL_DMA_Start_IT>
  //Start the DMA transfer
  __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8000266:	4b06      	ldr	r3, [pc, #24]	; (8000280 <main+0x60>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	68da      	ldr	r2, [r3, #12]
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <main+0x60>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	0089      	lsls	r1, r1, #2
 8000274:	430a      	orrs	r2, r1
 8000276:	60da      	str	r2, [r3, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000278:	e7fe      	b.n	8000278 <main+0x58>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	20000674 	.word	0x20000674
 8000280:	2000062c 	.word	0x2000062c
 8000284:	20000000 	.word	0x20000000
 8000288:	40000434 	.word	0x40000434
 800028c:	200006bc 	.word	0x200006bc

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b091      	sub	sp, #68	; 0x44
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	2410      	movs	r4, #16
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	2330      	movs	r3, #48	; 0x30
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f002 fc89 	bl	8002bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	003b      	movs	r3, r7
 80002a8:	0018      	movs	r0, r3
 80002aa:	2310      	movs	r3, #16
 80002ac:	001a      	movs	r2, r3
 80002ae:	2100      	movs	r1, #0
 80002b0:	f002 fc82 	bl	8002bb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b4:	0021      	movs	r1, r4
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2202      	movs	r2, #2
 80002ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2201      	movs	r2, #1
 80002c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2210      	movs	r2, #16
 80002c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2202      	movs	r2, #2
 80002cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	22a0      	movs	r2, #160	; 0xa0
 80002d8:	0392      	lsls	r2, r2, #14
 80002da:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fffd 	bl	80012e4 <HAL_RCC_OscConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002ee:	f000 fa0d 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	003b      	movs	r3, r7
 80002f4:	2207      	movs	r2, #7
 80002f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	003b      	movs	r3, r7
 80002fa:	2202      	movs	r2, #2
 80002fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	003b      	movs	r3, r7
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	003b      	movs	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800030a:	003b      	movs	r3, r7
 800030c:	2101      	movs	r1, #1
 800030e:	0018      	movs	r0, r3
 8000310:	f001 fb02 	bl	8001918 <HAL_RCC_ClockConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000318:	f000 f9f8 	bl	800070c <Error_Handler>
  }
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b011      	add	sp, #68	; 0x44
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b08e      	sub	sp, #56	; 0x38
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032a:	2328      	movs	r3, #40	; 0x28
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	0018      	movs	r0, r3
 8000330:	2310      	movs	r3, #16
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f002 fc3f 	bl	8002bb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033a:	2320      	movs	r3, #32
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	0018      	movs	r0, r3
 8000340:	2308      	movs	r3, #8
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f002 fc37 	bl	8002bb8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	0018      	movs	r0, r3
 800034e:	231c      	movs	r3, #28
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f002 fc30 	bl	8002bb8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000358:	4b2f      	ldr	r3, [pc, #188]	; (8000418 <MX_TIM2_Init+0xf4>)
 800035a:	2280      	movs	r2, #128	; 0x80
 800035c:	05d2      	lsls	r2, r2, #23
 800035e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000360:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <MX_TIM2_Init+0xf4>)
 8000362:	2200      	movs	r2, #0
 8000364:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000366:	4b2c      	ldr	r3, [pc, #176]	; (8000418 <MX_TIM2_Init+0xf4>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_Ticks - 1; //To make the frequency what we want it to be
 800036c:	4b2b      	ldr	r3, [pc, #172]	; (800041c <MX_TIM2_Init+0xf8>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	1e5a      	subs	r2, r3, #1
 8000372:	4b29      	ldr	r3, [pc, #164]	; (8000418 <MX_TIM2_Init+0xf4>)
 8000374:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000376:	4b28      	ldr	r3, [pc, #160]	; (8000418 <MX_TIM2_Init+0xf4>)
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800037c:	4b26      	ldr	r3, [pc, #152]	; (8000418 <MX_TIM2_Init+0xf4>)
 800037e:	2280      	movs	r2, #128	; 0x80
 8000380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000382:	4b25      	ldr	r3, [pc, #148]	; (8000418 <MX_TIM2_Init+0xf4>)
 8000384:	0018      	movs	r0, r3
 8000386:	f001 fbf9 	bl	8001b7c <HAL_TIM_Base_Init>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800038e:	f000 f9bd 	bl	800070c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000392:	2128      	movs	r1, #40	; 0x28
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2280      	movs	r2, #128	; 0x80
 8000398:	0152      	lsls	r2, r2, #5
 800039a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800039c:	187a      	adds	r2, r7, r1
 800039e:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <MX_TIM2_Init+0xf4>)
 80003a0:	0011      	movs	r1, r2
 80003a2:	0018      	movs	r0, r3
 80003a4:	f001 ff78 	bl	8002298 <HAL_TIM_ConfigClockSource>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003ac:	f000 f9ae 	bl	800070c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80003b0:	4b19      	ldr	r3, [pc, #100]	; (8000418 <MX_TIM2_Init+0xf4>)
 80003b2:	0018      	movs	r0, r3
 80003b4:	f001 fc32 	bl	8001c1c <HAL_TIM_OC_Init>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80003bc:	f000 f9a6 	bl	800070c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c0:	2120      	movs	r1, #32
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ce:	187a      	adds	r2, r7, r1
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_TIM2_Init+0xf4>)
 80003d2:	0011      	movs	r1, r2
 80003d4:	0018      	movs	r0, r3
 80003d6:	f002 fb6d 	bl	8002ab4 <HAL_TIMEx_MasterConfigSynchronization>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80003de:	f000 f995 	bl	800070c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003fa:	1d39      	adds	r1, r7, #4
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_TIM2_Init+0xf4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	0018      	movs	r0, r3
 8000402:	f001 fe2b 	bl	800205c <HAL_TIM_OC_ConfigChannel>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 800040a:	f000 f97f 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b00e      	add	sp, #56	; 0x38
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	2000062c 	.word	0x2000062c
 800041c:	20000600 	.word	0x20000600

08000420 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08e      	sub	sp, #56	; 0x38
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000426:	2328      	movs	r3, #40	; 0x28
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	0018      	movs	r0, r3
 800042c:	2310      	movs	r3, #16
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f002 fbc1 	bl	8002bb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000436:	2320      	movs	r3, #32
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	0018      	movs	r0, r3
 800043c:	2308      	movs	r3, #8
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f002 fbb9 	bl	8002bb8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	0018      	movs	r0, r3
 800044a:	231c      	movs	r3, #28
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f002 fbb2 	bl	8002bb8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000454:	4b2f      	ldr	r3, [pc, #188]	; (8000514 <MX_TIM3_Init+0xf4>)
 8000456:	4a30      	ldr	r2, [pc, #192]	; (8000518 <MX_TIM3_Init+0xf8>)
 8000458:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800045a:	4b2e      	ldr	r3, [pc, #184]	; (8000514 <MX_TIM3_Init+0xf4>)
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000460:	4b2c      	ldr	r3, [pc, #176]	; (8000514 <MX_TIM3_Init+0xf4>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 8000466:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <MX_TIM3_Init+0xf4>)
 8000468:	4a2c      	ldr	r2, [pc, #176]	; (800051c <MX_TIM3_Init+0xfc>)
 800046a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800046c:	4b29      	ldr	r3, [pc, #164]	; (8000514 <MX_TIM3_Init+0xf4>)
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000472:	4b28      	ldr	r3, [pc, #160]	; (8000514 <MX_TIM3_Init+0xf4>)
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000478:	4b26      	ldr	r3, [pc, #152]	; (8000514 <MX_TIM3_Init+0xf4>)
 800047a:	0018      	movs	r0, r3
 800047c:	f001 fb7e 	bl	8001b7c <HAL_TIM_Base_Init>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000484:	f000 f942 	bl	800070c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000488:	2128      	movs	r1, #40	; 0x28
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2280      	movs	r2, #128	; 0x80
 800048e:	0152      	lsls	r2, r2, #5
 8000490:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000492:	187a      	adds	r2, r7, r1
 8000494:	4b1f      	ldr	r3, [pc, #124]	; (8000514 <MX_TIM3_Init+0xf4>)
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fefd 	bl	8002298 <HAL_TIM_ConfigClockSource>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80004a2:	f000 f933 	bl	800070c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004a6:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_TIM3_Init+0xf4>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 fcc7 	bl	8001e3c <HAL_TIM_PWM_Init>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80004b2:	f000 f92b 	bl	800070c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b6:	2120      	movs	r1, #32
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004c4:	187a      	adds	r2, r7, r1
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <MX_TIM3_Init+0xf4>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 faf2 	bl	8002ab4 <HAL_TIMEx_MasterConfigSynchronization>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80004d4:	f000 f91a 	bl	800070c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2260      	movs	r2, #96	; 0x60
 80004dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f0:	1d39      	adds	r1, r7, #4
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_TIM3_Init+0xf4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 fe08 	bl	800210c <HAL_TIM_PWM_ConfigChannel>
 80004fc:	1e03      	subs	r3, r0, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000500:	f000 f904 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <MX_TIM3_Init+0xf4>)
 8000506:	0018      	movs	r0, r3
 8000508:	f000 f986 	bl	8000818 <HAL_TIM_MspPostInit>

}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b00e      	add	sp, #56	; 0x38
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000674 	.word	0x20000674
 8000518:	40000400 	.word	0x40000400
 800051c:	000003ff 	.word	0x000003ff

08000520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_DMA_Init+0x38>)
 8000528:	695a      	ldr	r2, [r3, #20]
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_DMA_Init+0x38>)
 800052c:	2101      	movs	r1, #1
 800052e:	430a      	orrs	r2, r1
 8000530:	615a      	str	r2, [r3, #20]
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_DMA_Init+0x38>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	2201      	movs	r2, #1
 8000538:	4013      	ands	r3, r2
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f000 fb0a 	bl	8000b5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f000 fb1c 	bl	8000b86 <HAL_NVIC_EnableIRQ>

}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b089      	sub	sp, #36	; 0x24
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	240c      	movs	r4, #12
 8000564:	193b      	adds	r3, r7, r4
 8000566:	0018      	movs	r0, r3
 8000568:	2314      	movs	r3, #20
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f002 fb23 	bl	8002bb8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000572:	4b31      	ldr	r3, [pc, #196]	; (8000638 <MX_GPIO_Init+0xdc>)
 8000574:	695a      	ldr	r2, [r3, #20]
 8000576:	4b30      	ldr	r3, [pc, #192]	; (8000638 <MX_GPIO_Init+0xdc>)
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	03c9      	lsls	r1, r1, #15
 800057c:	430a      	orrs	r2, r1
 800057e:	615a      	str	r2, [r3, #20]
 8000580:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <MX_GPIO_Init+0xdc>)
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	03db      	lsls	r3, r3, #15
 8000588:	4013      	ands	r3, r2
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <MX_GPIO_Init+0xdc>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b29      	ldr	r3, [pc, #164]	; (8000638 <MX_GPIO_Init+0xdc>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	0289      	lsls	r1, r1, #10
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <MX_GPIO_Init+0xdc>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	029b      	lsls	r3, r3, #10
 80005a4:	4013      	ands	r3, r2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b23      	ldr	r3, [pc, #140]	; (8000638 <MX_GPIO_Init+0xdc>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_GPIO_Init+0xdc>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0309      	lsls	r1, r1, #12
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_GPIO_Init+0xdc>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	031b      	lsls	r3, r3, #12
 80005c0:	4013      	ands	r3, r2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80005c6:	23c0      	movs	r3, #192	; 0xc0
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	481c      	ldr	r0, [pc, #112]	; (800063c <MX_GPIO_Init+0xe0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	0019      	movs	r1, r3
 80005d0:	f000 fe44 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2201      	movs	r2, #1
 80005d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	2288      	movs	r2, #136	; 0x88
 80005de:	0352      	lsls	r2, r2, #13
 80005e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	193a      	adds	r2, r7, r4
 80005ea:	2390      	movs	r3, #144	; 0x90
 80005ec:	05db      	lsls	r3, r3, #23
 80005ee:	0011      	movs	r1, r2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fcc3 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80005f6:	0021      	movs	r1, r4
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	22c0      	movs	r2, #192	; 0xc0
 80005fc:	0092      	lsls	r2, r2, #2
 80005fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2201      	movs	r2, #1
 8000604:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000612:	187b      	adds	r3, r7, r1
 8000614:	4a09      	ldr	r2, [pc, #36]	; (800063c <MX_GPIO_Init+0xe0>)
 8000616:	0019      	movs	r1, r3
 8000618:	0010      	movs	r0, r2
 800061a:	f000 fcaf 	bl	8000f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2005      	movs	r0, #5
 8000624:	f000 fa9a 	bl	8000b5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000628:	2005      	movs	r0, #5
 800062a:	f000 faac 	bl	8000b86 <HAL_NVIC_EnableIRQ>

}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b009      	add	sp, #36	; 0x24
 8000634:	bd90      	pop	{r4, r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	40021000 	.word	0x40021000
 800063c:	48000800 	.word	0x48000800

08000640 <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	uint32_t initial_time = HAL_GetTick();	// get initial tick on button press
 8000646:	f000 f9d3 	bl	80009f0 <HAL_GetTick>
 800064a:	0003      	movs	r3, r0
 800064c:	607b      	str	r3, [r7, #4]
	// debounce
	//while (HAL_GetTick() - initial_time < 200)	{
		//__HAL_TIM_DISABLE_DMA(&htim2, TIM_DMA_CC1);
		HAL_DMA_Abort_IT(&hdma_tim2_ch1);
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <EXTI0_1_IRQHandler+0xb0>)
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fb63 	bl	8000d1c <HAL_DMA_Abort_IT>
		uint32_t DstAddress = (uint32_t) &(TIM3->CCR1);
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <EXTI0_1_IRQHandler+0xb4>)
 8000658:	603b      	str	r3, [r7, #0]
			HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t)&triangle_LUT, DstAddress, NS);
		else if (waveCount == 2)
			HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t)&saw_LUT, DstAddress, NS);
		__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);*/

		switch(waveCount){
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <EXTI0_1_IRQHandler+0xb8>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d02b      	beq.n	80006ba <EXTI0_1_IRQHandler+0x7a>
 8000662:	dc3d      	bgt.n	80006e0 <EXTI0_1_IRQHandler+0xa0>
 8000664:	2b00      	cmp	r3, #0
 8000666:	d002      	beq.n	800066e <EXTI0_1_IRQHandler+0x2e>
 8000668:	2b01      	cmp	r3, #1
 800066a:	d013      	beq.n	8000694 <EXTI0_1_IRQHandler+0x54>
 800066c:	e038      	b.n	80006e0 <EXTI0_1_IRQHandler+0xa0>
			case 0:
				HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) &saw_LUT, DstAddress, NS);
 800066e:	4923      	ldr	r1, [pc, #140]	; (80006fc <EXTI0_1_IRQHandler+0xbc>)
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	481f      	ldr	r0, [pc, #124]	; (80006f0 <EXTI0_1_IRQHandler+0xb0>)
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	f000 faeb 	bl	8000c50 <HAL_DMA_Start_IT>
				waveCount = 1;
 800067a:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <EXTI0_1_IRQHandler+0xb8>)
 800067c:	2201      	movs	r2, #1
 800067e:	601a      	str	r2, [r3, #0]
				__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <EXTI0_1_IRQHandler+0xc0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	68da      	ldr	r2, [r3, #12]
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <EXTI0_1_IRQHandler+0xc0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	0089      	lsls	r1, r1, #2
 800068e:	430a      	orrs	r2, r1
 8000690:	60da      	str	r2, [r3, #12]
				break;
 8000692:	e025      	b.n	80006e0 <EXTI0_1_IRQHandler+0xa0>
			case 1:
				HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) &triangle_LUT, DstAddress, NS);
 8000694:	491b      	ldr	r1, [pc, #108]	; (8000704 <EXTI0_1_IRQHandler+0xc4>)
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	4815      	ldr	r0, [pc, #84]	; (80006f0 <EXTI0_1_IRQHandler+0xb0>)
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	f000 fad8 	bl	8000c50 <HAL_DMA_Start_IT>
				waveCount = 2;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <EXTI0_1_IRQHandler+0xb8>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	601a      	str	r2, [r3, #0]
				__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <EXTI0_1_IRQHandler+0xc0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	68da      	ldr	r2, [r3, #12]
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <EXTI0_1_IRQHandler+0xc0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	0089      	lsls	r1, r1, #2
 80006b4:	430a      	orrs	r2, r1
 80006b6:	60da      	str	r2, [r3, #12]
				break;
 80006b8:	e012      	b.n	80006e0 <EXTI0_1_IRQHandler+0xa0>
			case 2:
				HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) &sin_LUT, DstAddress, NS);
 80006ba:	4913      	ldr	r1, [pc, #76]	; (8000708 <EXTI0_1_IRQHandler+0xc8>)
 80006bc:	683a      	ldr	r2, [r7, #0]
 80006be:	480c      	ldr	r0, [pc, #48]	; (80006f0 <EXTI0_1_IRQHandler+0xb0>)
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	f000 fac5 	bl	8000c50 <HAL_DMA_Start_IT>
				waveCount = 0;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <EXTI0_1_IRQHandler+0xb8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
				__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <EXTI0_1_IRQHandler+0xc0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <EXTI0_1_IRQHandler+0xc0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	0089      	lsls	r1, r1, #2
 80006da:	430a      	orrs	r2, r1
 80006dc:	60da      	str	r2, [r3, #12]
				break;
 80006de:	46c0      	nop			; (mov r8, r8)
		}
		//Remember to debounce using HAL_GetTick()
	//}


	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0); // Clear interrupt flags
 80006e0:	2001      	movs	r0, #1
 80006e2:	f000 fdd9 	bl	8001298 <HAL_GPIO_EXTI_IRQHandler>
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	200006bc 	.word	0x200006bc
 80006f4:	40000434 	.word	0x40000434
 80006f8:	20000700 	.word	0x20000700
 80006fc:	20000200 	.word	0x20000200
 8000700:	2000062c 	.word	0x2000062c
 8000704:	20000400 	.word	0x20000400
 8000708:	20000000 	.word	0x20000000

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	e7fe      	b.n	8000714 <Error_Handler+0x8>
	...

08000718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_MspInit+0x44>)
 8000720:	699a      	ldr	r2, [r3, #24]
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <HAL_MspInit+0x44>)
 8000724:	2101      	movs	r1, #1
 8000726:	430a      	orrs	r2, r1
 8000728:	619a      	str	r2, [r3, #24]
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <HAL_MspInit+0x44>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	2201      	movs	r2, #1
 8000730:	4013      	ands	r3, r2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_MspInit+0x44>)
 8000738:	69da      	ldr	r2, [r3, #28]
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <HAL_MspInit+0x44>)
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	0549      	lsls	r1, r1, #21
 8000740:	430a      	orrs	r2, r1
 8000742:	61da      	str	r2, [r3, #28]
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_MspInit+0x44>)
 8000746:	69da      	ldr	r2, [r3, #28]
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	055b      	lsls	r3, r3, #21
 800074c:	4013      	ands	r3, r2
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b002      	add	sp, #8
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	429a      	cmp	r2, r3
 8000772:	d134      	bne.n	80007de <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <HAL_TIM_Base_MspInit+0xa8>)
 8000776:	69da      	ldr	r2, [r3, #28]
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <HAL_TIM_Base_MspInit+0xa8>)
 800077a:	2101      	movs	r1, #1
 800077c:	430a      	orrs	r2, r1
 800077e:	61da      	str	r2, [r3, #28]
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <HAL_TIM_Base_MspInit+0xa8>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	2201      	movs	r2, #1
 8000786:	4013      	ands	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <HAL_TIM_Base_MspInit+0xac>)
 800078e:	4a20      	ldr	r2, [pc, #128]	; (8000810 <HAL_TIM_Base_MspInit+0xb0>)
 8000790:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <HAL_TIM_Base_MspInit+0xac>)
 8000794:	2210      	movs	r2, #16
 8000796:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <HAL_TIM_Base_MspInit+0xac>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <HAL_TIM_Base_MspInit+0xac>)
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <HAL_TIM_Base_MspInit+0xac>)
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	0092      	lsls	r2, r2, #2
 80007aa:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <HAL_TIM_Base_MspInit+0xac>)
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_TIM_Base_MspInit+0xac>)
 80007b6:	2220      	movs	r2, #32
 80007b8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <HAL_TIM_Base_MspInit+0xac>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_TIM_Base_MspInit+0xac>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 f9fc 	bl	8000bc0 <HAL_DMA_Init>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80007cc:	f7ff ff9e 	bl	800070c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_TIM_Base_MspInit+0xac>)
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <HAL_TIM_Base_MspInit+0xac>)
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007dc:	e010      	b.n	8000800 <HAL_TIM_Base_MspInit+0xa0>
  else if(htim_base->Instance==TIM3)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <HAL_TIM_Base_MspInit+0xb4>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d10b      	bne.n	8000800 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <HAL_TIM_Base_MspInit+0xa8>)
 80007ea:	69da      	ldr	r2, [r3, #28]
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_TIM_Base_MspInit+0xa8>)
 80007ee:	2102      	movs	r1, #2
 80007f0:	430a      	orrs	r2, r1
 80007f2:	61da      	str	r2, [r3, #28]
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <HAL_TIM_Base_MspInit+0xa8>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	2202      	movs	r2, #2
 80007fa:	4013      	ands	r3, r2
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b004      	add	sp, #16
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	200006bc 	.word	0x200006bc
 8000810:	40020058 	.word	0x40020058
 8000814:	40000400 	.word	0x40000400

08000818 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	240c      	movs	r4, #12
 8000822:	193b      	adds	r3, r7, r4
 8000824:	0018      	movs	r0, r3
 8000826:	2314      	movs	r3, #20
 8000828:	001a      	movs	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	f002 f9c4 	bl	8002bb8 <memset>
  if(htim->Instance==TIM3)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a15      	ldr	r2, [pc, #84]	; (800088c <HAL_TIM_MspPostInit+0x74>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d124      	bne.n	8000884 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_TIM_MspPostInit+0x78>)
 800083c:	695a      	ldr	r2, [r3, #20]
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_TIM_MspPostInit+0x78>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	0289      	lsls	r1, r1, #10
 8000844:	430a      	orrs	r2, r1
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_TIM_MspPostInit+0x78>)
 800084a:	695a      	ldr	r2, [r3, #20]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	029b      	lsls	r3, r3, #10
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000856:	0021      	movs	r1, r4
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2240      	movs	r2, #64	; 0x40
 800085c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2202      	movs	r2, #2
 8000862:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2201      	movs	r2, #1
 8000874:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	187a      	adds	r2, r7, r1
 8000878:	2390      	movs	r3, #144	; 0x90
 800087a:	05db      	lsls	r3, r3, #23
 800087c:	0011      	movs	r1, r2
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fb7c 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b009      	add	sp, #36	; 0x24
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	40000400 	.word	0x40000400
 8000890:	40021000 	.word	0x40021000

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b8:	f000 f888 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <DMA1_Channel4_5_IRQHandler+0x14>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fa6b 	bl	8000da6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	200006bc 	.word	0x200006bc

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ee:	490e      	ldr	r1, [pc, #56]	; (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000904:	4c0b      	ldr	r4, [pc, #44]	; (8000934 <LoopForever+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000912:	f7ff ffe3 	bl	80008dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000916:	f002 f92b 	bl	8002b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091a:	f7ff fc81 	bl	8000220 <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   r0, =_estack
 8000920:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	20000610 	.word	0x20000610
  ldr r2, =_sidata
 800092c:	08002c18 	.word	0x08002c18
  ldr r2, =_sbss
 8000930:	20000610 	.word	0x20000610
  ldr r4, =_ebss
 8000934:	20000708 	.word	0x20000708

08000938 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_COMP_IRQHandler>
	...

0800093c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <HAL_Init+0x24>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_Init+0x24>)
 8000946:	2110      	movs	r1, #16
 8000948:	430a      	orrs	r2, r1
 800094a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800094c:	2000      	movs	r0, #0
 800094e:	f000 f809 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000952:	f7ff fee1 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <HAL_InitTick+0x5c>)
 800096e:	681c      	ldr	r4, [r3, #0]
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_InitTick+0x60>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	0019      	movs	r1, r3
 8000976:	23fa      	movs	r3, #250	; 0xfa
 8000978:	0098      	lsls	r0, r3, #2
 800097a:	f7ff fbc5 	bl	8000108 <__udivsi3>
 800097e:	0003      	movs	r3, r0
 8000980:	0019      	movs	r1, r3
 8000982:	0020      	movs	r0, r4
 8000984:	f7ff fbc0 	bl	8000108 <__udivsi3>
 8000988:	0003      	movs	r3, r0
 800098a:	0018      	movs	r0, r3
 800098c:	f000 f90b 	bl	8000ba6 <HAL_SYSTICK_Config>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	e00f      	b.n	80009b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d80b      	bhi.n	80009b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	2301      	movs	r3, #1
 80009a2:	425b      	negs	r3, r3
 80009a4:	2200      	movs	r2, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 f8d8 	bl	8000b5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_InitTick+0x64>)
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b003      	add	sp, #12
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	20000604 	.word	0x20000604
 80009c4:	2000060c 	.word	0x2000060c
 80009c8:	20000608 	.word	0x20000608

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	001a      	movs	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	18d2      	adds	r2, r2, r3
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_IncTick+0x20>)
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	2000060c 	.word	0x2000060c
 80009ec:	20000704 	.word	0x20000704

080009f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	; (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	20000704 	.word	0x20000704

08000a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b7f      	cmp	r3, #127	; 0x7f
 8000a16:	d809      	bhi.n	8000a2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	231f      	movs	r3, #31
 8000a20:	401a      	ands	r2, r3
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_EnableIRQ+0x30>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	4091      	lsls	r1, r2
 8000a28:	000a      	movs	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]
  }
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	0002      	movs	r2, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a4c:	d828      	bhi.n	8000aa0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4e:	4a2f      	ldr	r2, [pc, #188]	; (8000b0c <__NVIC_SetPriority+0xd4>)
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	33c0      	adds	r3, #192	; 0xc0
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	589b      	ldr	r3, [r3, r2]
 8000a5e:	1dfa      	adds	r2, r7, #7
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	0011      	movs	r1, r2
 8000a64:	2203      	movs	r2, #3
 8000a66:	400a      	ands	r2, r1
 8000a68:	00d2      	lsls	r2, r2, #3
 8000a6a:	21ff      	movs	r1, #255	; 0xff
 8000a6c:	4091      	lsls	r1, r2
 8000a6e:	000a      	movs	r2, r1
 8000a70:	43d2      	mvns	r2, r2
 8000a72:	401a      	ands	r2, r3
 8000a74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	019b      	lsls	r3, r3, #6
 8000a7a:	22ff      	movs	r2, #255	; 0xff
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	0018      	movs	r0, r3
 8000a84:	2303      	movs	r3, #3
 8000a86:	4003      	ands	r3, r0
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8c:	481f      	ldr	r0, [pc, #124]	; (8000b0c <__NVIC_SetPriority+0xd4>)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	430a      	orrs	r2, r1
 8000a98:	33c0      	adds	r3, #192	; 0xc0
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a9e:	e031      	b.n	8000b04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <__NVIC_SetPriority+0xd8>)
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	230f      	movs	r3, #15
 8000aaa:	400b      	ands	r3, r1
 8000aac:	3b08      	subs	r3, #8
 8000aae:	089b      	lsrs	r3, r3, #2
 8000ab0:	3306      	adds	r3, #6
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	18d3      	adds	r3, r2, r3
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	1dfa      	adds	r2, r7, #7
 8000abc:	7812      	ldrb	r2, [r2, #0]
 8000abe:	0011      	movs	r1, r2
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	00d2      	lsls	r2, r2, #3
 8000ac6:	21ff      	movs	r1, #255	; 0xff
 8000ac8:	4091      	lsls	r1, r2
 8000aca:	000a      	movs	r2, r1
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	401a      	ands	r2, r3
 8000ad0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	22ff      	movs	r2, #255	; 0xff
 8000ad8:	401a      	ands	r2, r3
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	0018      	movs	r0, r3
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	4003      	ands	r3, r0
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <__NVIC_SetPriority+0xd8>)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	001c      	movs	r4, r3
 8000af0:	230f      	movs	r3, #15
 8000af2:	4023      	ands	r3, r4
 8000af4:	3b08      	subs	r3, #8
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	430a      	orrs	r2, r1
 8000afa:	3306      	adds	r3, #6
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	18c3      	adds	r3, r0, r3
 8000b00:	3304      	adds	r3, #4
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b003      	add	sp, #12
 8000b0a:	bd90      	pop	{r4, r7, pc}
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	045b      	lsls	r3, r3, #17
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d301      	bcc.n	8000b2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e010      	b.n	8000b4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <SysTick_Config+0x44>)
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	3a01      	subs	r2, #1
 8000b32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b34:	2301      	movs	r3, #1
 8000b36:	425b      	negs	r3, r3
 8000b38:	2103      	movs	r1, #3
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f7ff ff7c 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SysTick_Config+0x44>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SysTick_Config+0x44>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	210f      	movs	r1, #15
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	1c02      	adds	r2, r0, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b004      	add	sp, #16
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	0002      	movs	r2, r0
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ff33 	bl	8000a04 <__NVIC_EnableIRQ>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff ffaf 	bl	8000b14 <SysTick_Config>
 8000bb6:	0003      	movs	r3, r0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e036      	b.n	8000c44 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2221      	movs	r2, #33	; 0x21
 8000bda:	2102      	movs	r1, #2
 8000bdc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <HAL_DMA_Init+0x8c>)
 8000bea:	4013      	ands	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 f98c 	bl	8000f44 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2221      	movs	r2, #33	; 0x21
 8000c36:	2101      	movs	r1, #1
 8000c38:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	2100      	movs	r1, #0
 8000c40:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
}  
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b004      	add	sp, #16
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	ffffc00f 	.word	0xffffc00f

08000c50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000c5e:	2317      	movs	r3, #23
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2220      	movs	r2, #32
 8000c6a:	5c9b      	ldrb	r3, [r3, r2]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d101      	bne.n	8000c74 <HAL_DMA_Start_IT+0x24>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e04f      	b.n	8000d14 <HAL_DMA_Start_IT+0xc4>
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2220      	movs	r2, #32
 8000c78:	2101      	movs	r1, #1
 8000c7a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2221      	movs	r2, #33	; 0x21
 8000c80:	5c9b      	ldrb	r3, [r3, r2]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d13a      	bne.n	8000cfe <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2221      	movs	r2, #33	; 0x21
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2200      	movs	r2, #0
 8000c94:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	438a      	bics	r2, r1
 8000ca4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	68b9      	ldr	r1, [r7, #8]
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	f000 f91c 	bl	8000eea <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d008      	beq.n	8000ccc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	210e      	movs	r1, #14
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	e00f      	b.n	8000cec <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	210a      	movs	r1, #10
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	438a      	bics	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	e007      	b.n	8000d0e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	2220      	movs	r2, #32
 8000d02:	2100      	movs	r1, #0
 8000d04:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000d06:	2317      	movs	r3, #23
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000d0e:	2317      	movs	r3, #23
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	781b      	ldrb	r3, [r3, #0]
} 
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b006      	add	sp, #24
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d24:	210f      	movs	r1, #15
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2221      	movs	r2, #33	; 0x21
 8000d30:	5c9b      	ldrb	r3, [r3, r2]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d006      	beq.n	8000d46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	e028      	b.n	8000d98 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	210e      	movs	r1, #14
 8000d52:	438a      	bics	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2101      	movs	r1, #1
 8000d62:	438a      	bics	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6e:	2101      	movs	r1, #1
 8000d70:	4091      	lsls	r1, r2
 8000d72:	000a      	movs	r2, r1
 8000d74:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2221      	movs	r2, #33	; 0x21
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2220      	movs	r2, #32
 8000d82:	2100      	movs	r1, #0
 8000d84:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d004      	beq.n	8000d98 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	0010      	movs	r0, r2
 8000d96:	4798      	blx	r3
    } 
  }
  return status;
 8000d98:	230f      	movs	r3, #15
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
}
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b004      	add	sp, #16
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	0013      	movs	r3, r2
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d024      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x72>
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	d020      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2220      	movs	r2, #32
 8000dde:	4013      	ands	r3, r2
 8000de0:	d107      	bne.n	8000df2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2104      	movs	r1, #4
 8000dee:	438a      	bics	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d100      	bne.n	8000e0c <HAL_DMA_IRQHandler+0x66>
 8000e0a:	e06a      	b.n	8000ee2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	0010      	movs	r0, r2
 8000e14:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e16:	e064      	b.n	8000ee2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	4013      	ands	r3, r2
 8000e26:	d02b      	beq.n	8000e80 <HAL_DMA_IRQHandler+0xda>
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d027      	beq.n	8000e80 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2220      	movs	r2, #32
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d10b      	bne.n	8000e54 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	210a      	movs	r1, #10
 8000e48:	438a      	bics	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2221      	movs	r2, #33	; 0x21
 8000e50:	2101      	movs	r1, #1
 8000e52:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4091      	lsls	r1, r2
 8000e60:	000a      	movs	r2, r1
 8000e62:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2220      	movs	r2, #32
 8000e68:	2100      	movs	r1, #0
 8000e6a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d036      	beq.n	8000ee2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	0010      	movs	r0, r2
 8000e7c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000e7e:	e030      	b.n	8000ee2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	2208      	movs	r2, #8
 8000e86:	409a      	lsls	r2, r3
 8000e88:	0013      	movs	r3, r2
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	d028      	beq.n	8000ee2 <HAL_DMA_IRQHandler+0x13c>
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	2208      	movs	r2, #8
 8000e94:	4013      	ands	r3, r2
 8000e96:	d024      	beq.n	8000ee2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	210e      	movs	r1, #14
 8000ea4:	438a      	bics	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4091      	lsls	r1, r2
 8000eb4:	000a      	movs	r2, r1
 8000eb6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2221      	movs	r2, #33	; 0x21
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2220      	movs	r2, #32
 8000eca:	2100      	movs	r1, #0
 8000ecc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	0010      	movs	r0, r2
 8000ede:	4798      	blx	r3
    }
   }
}  
 8000ee0:	e7ff      	b.n	8000ee2 <HAL_DMA_IRQHandler+0x13c>
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f00:	2101      	movs	r1, #1
 8000f02:	4091      	lsls	r1, r2
 8000f04:	000a      	movs	r2, r1
 8000f06:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b10      	cmp	r3, #16
 8000f16:	d108      	bne.n	8000f2a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f28:	e007      	b.n	8000f3a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	60da      	str	r2, [r3, #12]
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <DMA_CalcBaseAndBitshift+0x30>)
 8000f52:	4694      	mov	ip, r2
 8000f54:	4463      	add	r3, ip
 8000f56:	2114      	movs	r1, #20
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff f8d5 	bl	8000108 <__udivsi3>
 8000f5e:	0003      	movs	r3, r0
 8000f60:	009a      	lsls	r2, r3, #2
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <DMA_CalcBaseAndBitshift+0x34>)
 8000f6a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b002      	add	sp, #8
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	bffdfff8 	.word	0xbffdfff8
 8000f78:	40020000 	.word	0x40020000

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	e14f      	b.n	800122c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2101      	movs	r1, #1
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4091      	lsls	r1, r2
 8000f96:	000a      	movs	r2, r1
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d100      	bne.n	8000fa4 <HAL_GPIO_Init+0x28>
 8000fa2:	e140      	b.n	8001226 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d005      	beq.n	8000fbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d130      	bne.n	800101e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	0013      	movs	r3, r2
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	0013      	movs	r3, r2
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	2201      	movs	r2, #1
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	4013      	ands	r3, r2
 8001026:	2b03      	cmp	r3, #3
 8001028:	d017      	beq.n	800105a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	43da      	mvns	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2203      	movs	r2, #3
 8001060:	4013      	ands	r3, r2
 8001062:	2b02      	cmp	r3, #2
 8001064:	d123      	bne.n	80010ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	58d3      	ldr	r3, [r2, r3]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2207      	movs	r2, #7
 8001078:	4013      	ands	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	43da      	mvns	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	691a      	ldr	r2, [r3, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2107      	movs	r1, #7
 8001092:	400b      	ands	r3, r1
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	409a      	lsls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	6939      	ldr	r1, [r7, #16]
 80010ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	401a      	ands	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	23c0      	movs	r3, #192	; 0xc0
 80010e8:	029b      	lsls	r3, r3, #10
 80010ea:	4013      	ands	r3, r2
 80010ec:	d100      	bne.n	80010f0 <HAL_GPIO_Init+0x174>
 80010ee:	e09a      	b.n	8001226 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	4b54      	ldr	r3, [pc, #336]	; (8001244 <HAL_GPIO_Init+0x2c8>)
 80010f2:	699a      	ldr	r2, [r3, #24]
 80010f4:	4b53      	ldr	r3, [pc, #332]	; (8001244 <HAL_GPIO_Init+0x2c8>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	430a      	orrs	r2, r1
 80010fa:	619a      	str	r2, [r3, #24]
 80010fc:	4b51      	ldr	r3, [pc, #324]	; (8001244 <HAL_GPIO_Init+0x2c8>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	2201      	movs	r2, #1
 8001102:	4013      	ands	r3, r2
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001108:	4a4f      	ldr	r2, [pc, #316]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	589b      	ldr	r3, [r3, r2]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2203      	movs	r2, #3
 800111a:	4013      	ands	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	409a      	lsls	r2, r3
 8001122:	0013      	movs	r3, r2
 8001124:	43da      	mvns	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	2390      	movs	r3, #144	; 0x90
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	429a      	cmp	r2, r3
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x1e2>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a44      	ldr	r2, [pc, #272]	; (800124c <HAL_GPIO_Init+0x2d0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x1de>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a43      	ldr	r2, [pc, #268]	; (8001250 <HAL_GPIO_Init+0x2d4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x1da>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a42      	ldr	r2, [pc, #264]	; (8001254 <HAL_GPIO_Init+0x2d8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x1d6>
 800114e:	2303      	movs	r3, #3
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x1e4>
 8001152:	2305      	movs	r3, #5
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x1e4>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x1e4>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x1e4>
 800115e:	2300      	movs	r3, #0
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	2103      	movs	r1, #3
 8001164:	400a      	ands	r2, r1
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001170:	4935      	ldr	r1, [pc, #212]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800117e:	4b36      	ldr	r3, [pc, #216]	; (8001258 <HAL_GPIO_Init+0x2dc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43da      	mvns	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	025b      	lsls	r3, r3, #9
 8001196:	4013      	ands	r3, r2
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_GPIO_Init+0x2dc>)
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011a8:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <HAL_GPIO_Init+0x2dc>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43da      	mvns	r2, r3
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	029b      	lsls	r3, r3, #10
 80011c0:	4013      	ands	r3, r2
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <HAL_GPIO_Init+0x2dc>)
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HAL_GPIO_Init+0x2dc>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43da      	mvns	r2, r3
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	035b      	lsls	r3, r3, #13
 80011ea:	4013      	ands	r3, r2
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_GPIO_Init+0x2dc>)
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_GPIO_Init+0x2dc>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43da      	mvns	r2, r3
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	039b      	lsls	r3, r3, #14
 8001214:	4013      	ands	r3, r2
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_GPIO_Init+0x2dc>)
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	40da      	lsrs	r2, r3
 8001234:	1e13      	subs	r3, r2, #0
 8001236:	d000      	beq.n	800123a <HAL_GPIO_Init+0x2be>
 8001238:	e6a8      	b.n	8000f8c <HAL_GPIO_Init+0x10>
  } 
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b006      	add	sp, #24
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	48000400 	.word	0x48000400
 8001250:	48000800 	.word	0x48000800
 8001254:	48000c00 	.word	0x48000c00
 8001258:	40010400 	.word	0x40010400

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	0008      	movs	r0, r1
 8001266:	0011      	movs	r1, r2
 8001268:	1cbb      	adds	r3, r7, #2
 800126a:	1c02      	adds	r2, r0, #0
 800126c:	801a      	strh	r2, [r3, #0]
 800126e:	1c7b      	adds	r3, r7, #1
 8001270:	1c0a      	adds	r2, r1, #0
 8001272:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001274:	1c7b      	adds	r3, r7, #1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127c:	1cbb      	adds	r3, r7, #2
 800127e:	881a      	ldrh	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001286:	1cbb      	adds	r3, r7, #2
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	0002      	movs	r2, r0
 80012a0:	1dbb      	adds	r3, r7, #6
 80012a2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	1dba      	adds	r2, r7, #6
 80012aa:	8812      	ldrh	r2, [r2, #0]
 80012ac:	4013      	ands	r3, r2
 80012ae:	d008      	beq.n	80012c2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80012b2:	1dba      	adds	r2, r7, #6
 80012b4:	8812      	ldrh	r2, [r2, #0]
 80012b6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b8:	1dbb      	adds	r3, r7, #6
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 f807 	bl	80012d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	0002      	movs	r2, r0
 80012d8:	1dbb      	adds	r3, r7, #6
 80012da:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b002      	add	sp, #8
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e301      	b.n	80018fa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2201      	movs	r2, #1
 80012fc:	4013      	ands	r3, r2
 80012fe:	d100      	bne.n	8001302 <HAL_RCC_OscConfig+0x1e>
 8001300:	e08d      	b.n	800141e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001302:	4bc3      	ldr	r3, [pc, #780]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	220c      	movs	r2, #12
 8001308:	4013      	ands	r3, r2
 800130a:	2b04      	cmp	r3, #4
 800130c:	d00e      	beq.n	800132c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800130e:	4bc0      	ldr	r3, [pc, #768]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	220c      	movs	r2, #12
 8001314:	4013      	ands	r3, r2
 8001316:	2b08      	cmp	r3, #8
 8001318:	d116      	bne.n	8001348 <HAL_RCC_OscConfig+0x64>
 800131a:	4bbd      	ldr	r3, [pc, #756]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	025b      	lsls	r3, r3, #9
 8001322:	401a      	ands	r2, r3
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	025b      	lsls	r3, r3, #9
 8001328:	429a      	cmp	r2, r3
 800132a:	d10d      	bne.n	8001348 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	4bb8      	ldr	r3, [pc, #736]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	029b      	lsls	r3, r3, #10
 8001334:	4013      	ands	r3, r2
 8001336:	d100      	bne.n	800133a <HAL_RCC_OscConfig+0x56>
 8001338:	e070      	b.n	800141c <HAL_RCC_OscConfig+0x138>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d000      	beq.n	8001344 <HAL_RCC_OscConfig+0x60>
 8001342:	e06b      	b.n	800141c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e2d8      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d107      	bne.n	8001360 <HAL_RCC_OscConfig+0x7c>
 8001350:	4baf      	ldr	r3, [pc, #700]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4bae      	ldr	r3, [pc, #696]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	0249      	lsls	r1, r1, #9
 800135a:	430a      	orrs	r2, r1
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e02f      	b.n	80013c0 <HAL_RCC_OscConfig+0xdc>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10c      	bne.n	8001382 <HAL_RCC_OscConfig+0x9e>
 8001368:	4ba9      	ldr	r3, [pc, #676]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4ba8      	ldr	r3, [pc, #672]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800136e:	49a9      	ldr	r1, [pc, #676]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	4ba6      	ldr	r3, [pc, #664]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4ba5      	ldr	r3, [pc, #660]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800137a:	49a7      	ldr	r1, [pc, #668]	; (8001618 <HAL_RCC_OscConfig+0x334>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e01e      	b.n	80013c0 <HAL_RCC_OscConfig+0xdc>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b05      	cmp	r3, #5
 8001388:	d10e      	bne.n	80013a8 <HAL_RCC_OscConfig+0xc4>
 800138a:	4ba1      	ldr	r3, [pc, #644]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4ba0      	ldr	r3, [pc, #640]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001390:	2180      	movs	r1, #128	; 0x80
 8001392:	02c9      	lsls	r1, r1, #11
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	4b9d      	ldr	r3, [pc, #628]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b9c      	ldr	r3, [pc, #624]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	0249      	lsls	r1, r1, #9
 80013a2:	430a      	orrs	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	e00b      	b.n	80013c0 <HAL_RCC_OscConfig+0xdc>
 80013a8:	4b99      	ldr	r3, [pc, #612]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b98      	ldr	r3, [pc, #608]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	4999      	ldr	r1, [pc, #612]	; (8001614 <HAL_RCC_OscConfig+0x330>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	4b96      	ldr	r3, [pc, #600]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b95      	ldr	r3, [pc, #596]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80013ba:	4997      	ldr	r1, [pc, #604]	; (8001618 <HAL_RCC_OscConfig+0x334>)
 80013bc:	400a      	ands	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d014      	beq.n	80013f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fb12 	bl	80009f0 <HAL_GetTick>
 80013cc:	0003      	movs	r3, r0
 80013ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d2:	f7ff fb0d 	bl	80009f0 <HAL_GetTick>
 80013d6:	0002      	movs	r2, r0
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b64      	cmp	r3, #100	; 0x64
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e28a      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e4:	4b8a      	ldr	r3, [pc, #552]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	029b      	lsls	r3, r3, #10
 80013ec:	4013      	ands	r3, r2
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0xee>
 80013f0:	e015      	b.n	800141e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fafd 	bl	80009f0 <HAL_GetTick>
 80013f6:	0003      	movs	r3, r0
 80013f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff faf8 	bl	80009f0 <HAL_GetTick>
 8001400:	0002      	movs	r2, r0
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e275      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140e:	4b80      	ldr	r3, [pc, #512]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	029b      	lsls	r3, r3, #10
 8001416:	4013      	ands	r3, r2
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x118>
 800141a:	e000      	b.n	800141e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2202      	movs	r2, #2
 8001424:	4013      	ands	r3, r2
 8001426:	d100      	bne.n	800142a <HAL_RCC_OscConfig+0x146>
 8001428:	e069      	b.n	80014fe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800142a:	4b79      	ldr	r3, [pc, #484]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	220c      	movs	r2, #12
 8001430:	4013      	ands	r3, r2
 8001432:	d00b      	beq.n	800144c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001434:	4b76      	ldr	r3, [pc, #472]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	220c      	movs	r2, #12
 800143a:	4013      	ands	r3, r2
 800143c:	2b08      	cmp	r3, #8
 800143e:	d11c      	bne.n	800147a <HAL_RCC_OscConfig+0x196>
 8001440:	4b73      	ldr	r3, [pc, #460]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	025b      	lsls	r3, r3, #9
 8001448:	4013      	ands	r3, r2
 800144a:	d116      	bne.n	800147a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144c:	4b70      	ldr	r3, [pc, #448]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2202      	movs	r2, #2
 8001452:	4013      	ands	r3, r2
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x17e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e24b      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b6b      	ldr	r3, [pc, #428]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	22f8      	movs	r2, #248	; 0xf8
 8001468:	4393      	bics	r3, r2
 800146a:	0019      	movs	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	00da      	lsls	r2, r3, #3
 8001472:	4b67      	ldr	r3, [pc, #412]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001478:	e041      	b.n	80014fe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d024      	beq.n	80014cc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001482:	4b63      	ldr	r3, [pc, #396]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b62      	ldr	r3, [pc, #392]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001488:	2101      	movs	r1, #1
 800148a:	430a      	orrs	r2, r1
 800148c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff faaf 	bl	80009f0 <HAL_GetTick>
 8001492:	0003      	movs	r3, r0
 8001494:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff faaa 	bl	80009f0 <HAL_GetTick>
 800149c:	0002      	movs	r2, r0
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e227      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014aa:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2202      	movs	r2, #2
 80014b0:	4013      	ands	r3, r2
 80014b2:	d0f1      	beq.n	8001498 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b56      	ldr	r3, [pc, #344]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	22f8      	movs	r2, #248	; 0xf8
 80014ba:	4393      	bics	r3, r2
 80014bc:	0019      	movs	r1, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	00da      	lsls	r2, r3, #3
 80014c4:	4b52      	ldr	r3, [pc, #328]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e018      	b.n	80014fe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b4f      	ldr	r3, [pc, #316]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014d2:	2101      	movs	r1, #1
 80014d4:	438a      	bics	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fa8a 	bl	80009f0 <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff fa85 	bl	80009f0 <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e202      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f4:	4b46      	ldr	r3, [pc, #280]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2202      	movs	r2, #2
 80014fa:	4013      	ands	r3, r2
 80014fc:	d1f1      	bne.n	80014e2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2208      	movs	r2, #8
 8001504:	4013      	ands	r3, r2
 8001506:	d036      	beq.n	8001576 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d019      	beq.n	8001544 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001510:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001514:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001516:	2101      	movs	r1, #1
 8001518:	430a      	orrs	r2, r1
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151c:	f7ff fa68 	bl	80009f0 <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001526:	f7ff fa63 	bl	80009f0 <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e1e0      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001538:	4b35      	ldr	r3, [pc, #212]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	2202      	movs	r2, #2
 800153e:	4013      	ands	r3, r2
 8001540:	d0f1      	beq.n	8001526 <HAL_RCC_OscConfig+0x242>
 8001542:	e018      	b.n	8001576 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001544:	4b32      	ldr	r3, [pc, #200]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001548:	4b31      	ldr	r3, [pc, #196]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800154a:	2101      	movs	r1, #1
 800154c:	438a      	bics	r2, r1
 800154e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff fa4e 	bl	80009f0 <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155a:	f7ff fa49 	bl	80009f0 <HAL_GetTick>
 800155e:	0002      	movs	r2, r0
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e1c6      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	2202      	movs	r2, #2
 8001572:	4013      	ands	r3, r2
 8001574:	d1f1      	bne.n	800155a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2204      	movs	r2, #4
 800157c:	4013      	ands	r3, r2
 800157e:	d100      	bne.n	8001582 <HAL_RCC_OscConfig+0x29e>
 8001580:	e0b4      	b.n	80016ec <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001582:	201f      	movs	r0, #31
 8001584:	183b      	adds	r3, r7, r0
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800158c:	69da      	ldr	r2, [r3, #28]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	055b      	lsls	r3, r3, #21
 8001592:	4013      	ands	r3, r2
 8001594:	d110      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	0549      	lsls	r1, r1, #21
 80015a0:	430a      	orrs	r2, r1
 80015a2:	61da      	str	r2, [r3, #28]
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 80015a6:	69da      	ldr	r2, [r3, #28]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	055b      	lsls	r3, r3, #21
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015b2:	183b      	adds	r3, r7, r0
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4013      	ands	r3, r2
 80015c2:	d11a      	bne.n	80015fa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80015ca:	2180      	movs	r1, #128	; 0x80
 80015cc:	0049      	lsls	r1, r1, #1
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fa0d 	bl	80009f0 <HAL_GetTick>
 80015d6:	0003      	movs	r3, r0
 80015d8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015dc:	f7ff fa08 	bl	80009f0 <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e185      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_RCC_OscConfig+0x338>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4013      	ands	r3, r2
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d10e      	bne.n	8001620 <HAL_RCC_OscConfig+0x33c>
 8001602:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001604:	6a1a      	ldr	r2, [r3, #32]
 8001606:	4b02      	ldr	r3, [pc, #8]	; (8001610 <HAL_RCC_OscConfig+0x32c>)
 8001608:	2101      	movs	r1, #1
 800160a:	430a      	orrs	r2, r1
 800160c:	621a      	str	r2, [r3, #32]
 800160e:	e035      	b.n	800167c <HAL_RCC_OscConfig+0x398>
 8001610:	40021000 	.word	0x40021000
 8001614:	fffeffff 	.word	0xfffeffff
 8001618:	fffbffff 	.word	0xfffbffff
 800161c:	40007000 	.word	0x40007000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_OscConfig+0x35e>
 8001628:	4bb6      	ldr	r3, [pc, #728]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800162a:	6a1a      	ldr	r2, [r3, #32]
 800162c:	4bb5      	ldr	r3, [pc, #724]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800162e:	2101      	movs	r1, #1
 8001630:	438a      	bics	r2, r1
 8001632:	621a      	str	r2, [r3, #32]
 8001634:	4bb3      	ldr	r3, [pc, #716]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001636:	6a1a      	ldr	r2, [r3, #32]
 8001638:	4bb2      	ldr	r3, [pc, #712]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800163a:	2104      	movs	r1, #4
 800163c:	438a      	bics	r2, r1
 800163e:	621a      	str	r2, [r3, #32]
 8001640:	e01c      	b.n	800167c <HAL_RCC_OscConfig+0x398>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x380>
 800164a:	4bae      	ldr	r3, [pc, #696]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800164c:	6a1a      	ldr	r2, [r3, #32]
 800164e:	4bad      	ldr	r3, [pc, #692]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001650:	2104      	movs	r1, #4
 8001652:	430a      	orrs	r2, r1
 8001654:	621a      	str	r2, [r3, #32]
 8001656:	4bab      	ldr	r3, [pc, #684]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001658:	6a1a      	ldr	r2, [r3, #32]
 800165a:	4baa      	ldr	r3, [pc, #680]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800165c:	2101      	movs	r1, #1
 800165e:	430a      	orrs	r2, r1
 8001660:	621a      	str	r2, [r3, #32]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0x398>
 8001664:	4ba7      	ldr	r3, [pc, #668]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	4ba6      	ldr	r3, [pc, #664]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800166a:	2101      	movs	r1, #1
 800166c:	438a      	bics	r2, r1
 800166e:	621a      	str	r2, [r3, #32]
 8001670:	4ba4      	ldr	r3, [pc, #656]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001672:	6a1a      	ldr	r2, [r3, #32]
 8001674:	4ba3      	ldr	r3, [pc, #652]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001676:	2104      	movs	r1, #4
 8001678:	438a      	bics	r2, r1
 800167a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d014      	beq.n	80016ae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff f9b4 	bl	80009f0 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168c:	e009      	b.n	80016a2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff f9af 	bl	80009f0 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	4a9b      	ldr	r2, [pc, #620]	; (8001908 <HAL_RCC_OscConfig+0x624>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e12b      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	4b98      	ldr	r3, [pc, #608]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	2202      	movs	r2, #2
 80016a8:	4013      	ands	r3, r2
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x3aa>
 80016ac:	e013      	b.n	80016d6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff f99f 	bl	80009f0 <HAL_GetTick>
 80016b2:	0003      	movs	r3, r0
 80016b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b6:	e009      	b.n	80016cc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff f99a 	bl	80009f0 <HAL_GetTick>
 80016bc:	0002      	movs	r2, r0
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	4a91      	ldr	r2, [pc, #580]	; (8001908 <HAL_RCC_OscConfig+0x624>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e116      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	4b8d      	ldr	r3, [pc, #564]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	2202      	movs	r2, #2
 80016d2:	4013      	ands	r3, r2
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016d6:	231f      	movs	r3, #31
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e0:	4b88      	ldr	r3, [pc, #544]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	4b87      	ldr	r3, [pc, #540]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 80016e6:	4989      	ldr	r1, [pc, #548]	; (800190c <HAL_RCC_OscConfig+0x628>)
 80016e8:	400a      	ands	r2, r1
 80016ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2210      	movs	r2, #16
 80016f2:	4013      	ands	r3, r2
 80016f4:	d063      	beq.n	80017be <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d12a      	bne.n	8001754 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016fe:	4b81      	ldr	r3, [pc, #516]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001702:	4b80      	ldr	r3, [pc, #512]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001704:	2104      	movs	r1, #4
 8001706:	430a      	orrs	r2, r1
 8001708:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800170a:	4b7e      	ldr	r3, [pc, #504]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800170c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800170e:	4b7d      	ldr	r3, [pc, #500]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001710:	2101      	movs	r1, #1
 8001712:	430a      	orrs	r2, r1
 8001714:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001716:	f7ff f96b 	bl	80009f0 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001720:	f7ff f966 	bl	80009f0 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0e3      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001732:	4b74      	ldr	r3, [pc, #464]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001736:	2202      	movs	r2, #2
 8001738:	4013      	ands	r3, r2
 800173a:	d0f1      	beq.n	8001720 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800173c:	4b71      	ldr	r3, [pc, #452]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001740:	22f8      	movs	r2, #248	; 0xf8
 8001742:	4393      	bics	r3, r2
 8001744:	0019      	movs	r1, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	00da      	lsls	r2, r3, #3
 800174c:	4b6d      	ldr	r3, [pc, #436]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800174e:	430a      	orrs	r2, r1
 8001750:	635a      	str	r2, [r3, #52]	; 0x34
 8001752:	e034      	b.n	80017be <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	3305      	adds	r3, #5
 800175a:	d111      	bne.n	8001780 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800175c:	4b69      	ldr	r3, [pc, #420]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800175e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001760:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001762:	2104      	movs	r1, #4
 8001764:	438a      	bics	r2, r1
 8001766:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001768:	4b66      	ldr	r3, [pc, #408]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	22f8      	movs	r2, #248	; 0xf8
 800176e:	4393      	bics	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	00da      	lsls	r2, r3, #3
 8001778:	4b62      	ldr	r3, [pc, #392]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800177a:	430a      	orrs	r2, r1
 800177c:	635a      	str	r2, [r3, #52]	; 0x34
 800177e:	e01e      	b.n	80017be <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001780:	4b60      	ldr	r3, [pc, #384]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001784:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001786:	2104      	movs	r1, #4
 8001788:	430a      	orrs	r2, r1
 800178a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800178c:	4b5d      	ldr	r3, [pc, #372]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800178e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001790:	4b5c      	ldr	r3, [pc, #368]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001792:	2101      	movs	r1, #1
 8001794:	438a      	bics	r2, r1
 8001796:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7ff f92a 	bl	80009f0 <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017a2:	f7ff f925 	bl	80009f0 <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e0a2      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017b4:	4b53      	ldr	r3, [pc, #332]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 80017b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b8:	2202      	movs	r2, #2
 80017ba:	4013      	ands	r3, r2
 80017bc:	d1f1      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d100      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4e4>
 80017c6:	e097      	b.n	80018f8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c8:	4b4e      	ldr	r3, [pc, #312]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	220c      	movs	r2, #12
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d100      	bne.n	80017d6 <HAL_RCC_OscConfig+0x4f2>
 80017d4:	e06b      	b.n	80018ae <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d14c      	bne.n	8001878 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b49      	ldr	r3, [pc, #292]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4b48      	ldr	r3, [pc, #288]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 80017e4:	494a      	ldr	r1, [pc, #296]	; (8001910 <HAL_RCC_OscConfig+0x62c>)
 80017e6:	400a      	ands	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff f901 	bl	80009f0 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f8fc 	bl	80009f0 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e079      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001806:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	049b      	lsls	r3, r3, #18
 800180e:	4013      	ands	r3, r2
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001812:	4b3c      	ldr	r3, [pc, #240]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	220f      	movs	r2, #15
 8001818:	4393      	bics	r3, r2
 800181a:	0019      	movs	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001820:	4b38      	ldr	r3, [pc, #224]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001822:	430a      	orrs	r2, r1
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
 8001826:	4b37      	ldr	r3, [pc, #220]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4a3a      	ldr	r2, [pc, #232]	; (8001914 <HAL_RCC_OscConfig+0x630>)
 800182c:	4013      	ands	r3, r2
 800182e:	0019      	movs	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	431a      	orrs	r2, r3
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	0449      	lsls	r1, r1, #17
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff f8cf 	bl	80009f0 <HAL_GetTick>
 8001852:	0003      	movs	r3, r0
 8001854:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff f8ca 	bl	80009f0 <HAL_GetTick>
 800185c:	0002      	movs	r2, r0
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e047      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	049b      	lsls	r3, r3, #18
 8001872:	4013      	ands	r3, r2
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x574>
 8001876:	e03f      	b.n	80018f8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 800187e:	4924      	ldr	r1, [pc, #144]	; (8001910 <HAL_RCC_OscConfig+0x62c>)
 8001880:	400a      	ands	r2, r1
 8001882:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff f8b4 	bl	80009f0 <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff f8af 	bl	80009f0 <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e02c      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	049b      	lsls	r3, r3, #18
 80018a8:	4013      	ands	r3, r2
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x5aa>
 80018ac:	e024      	b.n	80018f8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e01f      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_RCC_OscConfig+0x620>)
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	025b      	lsls	r3, r3, #9
 80018cc:	401a      	ands	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d10e      	bne.n	80018f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	220f      	movs	r2, #15
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	23f0      	movs	r3, #240	; 0xf0
 80018e8:	039b      	lsls	r3, r3, #14
 80018ea:	401a      	ands	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b008      	add	sp, #32
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	40021000 	.word	0x40021000
 8001908:	00001388 	.word	0x00001388
 800190c:	efffffff 	.word	0xefffffff
 8001910:	feffffff 	.word	0xfeffffff
 8001914:	ffc2ffff 	.word	0xffc2ffff

08001918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0b3      	b.n	8001a94 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <HAL_RCC_ClockConfig+0x184>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	4013      	ands	r3, r2
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d911      	bls.n	800195e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b58      	ldr	r3, [pc, #352]	; (8001a9c <HAL_RCC_ClockConfig+0x184>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	4393      	bics	r3, r2
 8001942:	0019      	movs	r1, r3
 8001944:	4b55      	ldr	r3, [pc, #340]	; (8001a9c <HAL_RCC_ClockConfig+0x184>)
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_RCC_ClockConfig+0x184>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	4013      	ands	r3, r2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d001      	beq.n	800195e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e09a      	b.n	8001a94 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2202      	movs	r2, #2
 8001964:	4013      	ands	r3, r2
 8001966:	d015      	beq.n	8001994 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2204      	movs	r2, #4
 800196e:	4013      	ands	r3, r2
 8001970:	d006      	beq.n	8001980 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001972:	4b4b      	ldr	r3, [pc, #300]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4b4a      	ldr	r3, [pc, #296]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 8001978:	21e0      	movs	r1, #224	; 0xe0
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	430a      	orrs	r2, r1
 800197e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	22f0      	movs	r2, #240	; 0xf0
 8001986:	4393      	bics	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 8001990:	430a      	orrs	r2, r1
 8001992:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	d040      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	029b      	lsls	r3, r3, #10
 80019ae:	4013      	ands	r3, r2
 80019b0:	d114      	bne.n	80019dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06e      	b.n	8001a94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019be:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	049b      	lsls	r3, r3, #18
 80019c6:	4013      	ands	r3, r2
 80019c8:	d108      	bne.n	80019dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e062      	b.n	8001a94 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ce:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e05b      	b.n	8001a94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019dc:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2203      	movs	r2, #3
 80019e2:	4393      	bics	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f0:	f7fe fffe 	bl	80009f0 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f8:	e009      	b.n	8001a0e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fa:	f7fe fff9 	bl	80009f0 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	4a27      	ldr	r2, [pc, #156]	; (8001aa4 <HAL_RCC_ClockConfig+0x18c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e042      	b.n	8001a94 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	220c      	movs	r2, #12
 8001a14:	401a      	ands	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1ec      	bne.n	80019fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_RCC_ClockConfig+0x184>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2201      	movs	r2, #1
 8001a26:	4013      	ands	r3, r2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d211      	bcs.n	8001a52 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_RCC_ClockConfig+0x184>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2201      	movs	r2, #1
 8001a34:	4393      	bics	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_RCC_ClockConfig+0x184>)
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_RCC_ClockConfig+0x184>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2201      	movs	r2, #1
 8001a46:	4013      	ands	r3, r2
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e020      	b.n	8001a94 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2204      	movs	r2, #4
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d009      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <HAL_RCC_ClockConfig+0x190>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	0019      	movs	r1, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a70:	f000 f820 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a74:	0001      	movs	r1, r0
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_RCC_ClockConfig+0x188>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	4013      	ands	r3, r2
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_RCC_ClockConfig+0x194>)
 8001a82:	5cd3      	ldrb	r3, [r2, r3]
 8001a84:	000a      	movs	r2, r1
 8001a86:	40da      	lsrs	r2, r3
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x198>)
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7fe ff69 	bl	8000964 <HAL_InitTick>
  
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b004      	add	sp, #16
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40022000 	.word	0x40022000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	00001388 	.word	0x00001388
 8001aa8:	fffff8ff 	.word	0xfffff8ff
 8001aac:	08002c00 	.word	0x08002c00
 8001ab0:	20000604 	.word	0x20000604

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b08f      	sub	sp, #60	; 0x3c
 8001ab8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001aba:	2314      	movs	r3, #20
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	4a2b      	ldr	r2, [pc, #172]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ac2:	c313      	stmia	r3!, {r0, r1, r4}
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4a29      	ldr	r2, [pc, #164]	; (8001b70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001acc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ace:	c313      	stmia	r3!, {r0, r1, r4}
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8001adc:	2300      	movs	r3, #0
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af0:	220c      	movs	r2, #12
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d002      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0x4a>
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d003      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x50>
 8001afc:	e02d      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001afe:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b02:	e02d      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b06:	0c9b      	lsrs	r3, r3, #18
 8001b08:	220f      	movs	r2, #15
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2214      	movs	r2, #20
 8001b0e:	18ba      	adds	r2, r7, r2
 8001b10:	5cd3      	ldrb	r3, [r2, r3]
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	220f      	movs	r2, #15
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	1d3a      	adds	r2, r7, #4
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	025b      	lsls	r3, r3, #9
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d009      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b2e:	4812      	ldr	r0, [pc, #72]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b30:	f7fe faea 	bl	8000108 <__udivsi3>
 8001b34:	0003      	movs	r3, r0
 8001b36:	001a      	movs	r2, r3
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	4353      	muls	r3, r2
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3e:	e009      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b42:	000a      	movs	r2, r1
 8001b44:	0152      	lsls	r2, r2, #5
 8001b46:	1a52      	subs	r2, r2, r1
 8001b48:	0193      	lsls	r3, r2, #6
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	185b      	adds	r3, r3, r1
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b58:	e002      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b5e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b00f      	add	sp, #60	; 0x3c
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	08002be0 	.word	0x08002be0
 8001b70:	08002bf0 	.word	0x08002bf0
 8001b74:	40021000 	.word	0x40021000
 8001b78:	007a1200 	.word	0x007a1200

08001b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e042      	b.n	8001c14 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	223d      	movs	r2, #61	; 0x3d
 8001b92:	5c9b      	ldrb	r3, [r3, r2]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d107      	bne.n	8001baa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	223c      	movs	r2, #60	; 0x3c
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7fe fddb 	bl	8000760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	223d      	movs	r2, #61	; 0x3d
 8001bae:	2102      	movs	r1, #2
 8001bb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	0019      	movs	r1, r3
 8001bbc:	0010      	movs	r0, r2
 8001bbe:	f000 fc3f 	bl	8002440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2246      	movs	r2, #70	; 0x46
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	223e      	movs	r2, #62	; 0x3e
 8001bce:	2101      	movs	r1, #1
 8001bd0:	5499      	strb	r1, [r3, r2]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223f      	movs	r2, #63	; 0x3f
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	5499      	strb	r1, [r3, r2]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2240      	movs	r2, #64	; 0x40
 8001bde:	2101      	movs	r1, #1
 8001be0:	5499      	strb	r1, [r3, r2]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2241      	movs	r2, #65	; 0x41
 8001be6:	2101      	movs	r1, #1
 8001be8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2242      	movs	r2, #66	; 0x42
 8001bee:	2101      	movs	r1, #1
 8001bf0:	5499      	strb	r1, [r3, r2]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2243      	movs	r2, #67	; 0x43
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2244      	movs	r2, #68	; 0x44
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2245      	movs	r2, #69	; 0x45
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	223d      	movs	r2, #61	; 0x3d
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b002      	add	sp, #8
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e042      	b.n	8001cb4 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	223d      	movs	r2, #61	; 0x3d
 8001c32:	5c9b      	ldrb	r3, [r3, r2]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d107      	bne.n	8001c4a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	223c      	movs	r2, #60	; 0x3c
 8001c3e:	2100      	movs	r1, #0
 8001c40:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f000 f839 	bl	8001cbc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	223d      	movs	r2, #61	; 0x3d
 8001c4e:	2102      	movs	r1, #2
 8001c50:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	0010      	movs	r0, r2
 8001c5e:	f000 fbef 	bl	8002440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2246      	movs	r2, #70	; 0x46
 8001c66:	2101      	movs	r1, #1
 8001c68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	223e      	movs	r2, #62	; 0x3e
 8001c6e:	2101      	movs	r1, #1
 8001c70:	5499      	strb	r1, [r3, r2]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	223f      	movs	r2, #63	; 0x3f
 8001c76:	2101      	movs	r1, #1
 8001c78:	5499      	strb	r1, [r3, r2]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2240      	movs	r2, #64	; 0x40
 8001c7e:	2101      	movs	r1, #1
 8001c80:	5499      	strb	r1, [r3, r2]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2241      	movs	r2, #65	; 0x41
 8001c86:	2101      	movs	r1, #1
 8001c88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2242      	movs	r2, #66	; 0x42
 8001c8e:	2101      	movs	r1, #1
 8001c90:	5499      	strb	r1, [r3, r2]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2243      	movs	r2, #67	; 0x43
 8001c96:	2101      	movs	r1, #1
 8001c98:	5499      	strb	r1, [r3, r2]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2244      	movs	r2, #68	; 0x44
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	5499      	strb	r1, [r3, r2]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2245      	movs	r2, #69	; 0x45
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	223d      	movs	r2, #61	; 0x3d
 8001cae:	2101      	movs	r1, #1
 8001cb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d108      	bne.n	8001cee <HAL_TIM_OC_Start+0x22>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	223e      	movs	r2, #62	; 0x3e
 8001ce0:	5c9b      	ldrb	r3, [r3, r2]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	1e5a      	subs	r2, r3, #1
 8001ce8:	4193      	sbcs	r3, r2
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	e01f      	b.n	8001d2e <HAL_TIM_OC_Start+0x62>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d108      	bne.n	8001d06 <HAL_TIM_OC_Start+0x3a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	223f      	movs	r2, #63	; 0x3f
 8001cf8:	5c9b      	ldrb	r3, [r3, r2]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	4193      	sbcs	r3, r2
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	e013      	b.n	8001d2e <HAL_TIM_OC_Start+0x62>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d108      	bne.n	8001d1e <HAL_TIM_OC_Start+0x52>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	5c9b      	ldrb	r3, [r3, r2]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	1e5a      	subs	r2, r3, #1
 8001d18:	4193      	sbcs	r3, r2
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	e007      	b.n	8001d2e <HAL_TIM_OC_Start+0x62>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2241      	movs	r2, #65	; 0x41
 8001d22:	5c9b      	ldrb	r3, [r3, r2]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	1e5a      	subs	r2, r3, #1
 8001d2a:	4193      	sbcs	r3, r2
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_TIM_OC_Start+0x6a>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e074      	b.n	8001e20 <HAL_TIM_OC_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d104      	bne.n	8001d46 <HAL_TIM_OC_Start+0x7a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	223e      	movs	r2, #62	; 0x3e
 8001d40:	2102      	movs	r1, #2
 8001d42:	5499      	strb	r1, [r3, r2]
 8001d44:	e013      	b.n	8001d6e <HAL_TIM_OC_Start+0xa2>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d104      	bne.n	8001d56 <HAL_TIM_OC_Start+0x8a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	223f      	movs	r2, #63	; 0x3f
 8001d50:	2102      	movs	r1, #2
 8001d52:	5499      	strb	r1, [r3, r2]
 8001d54:	e00b      	b.n	8001d6e <HAL_TIM_OC_Start+0xa2>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d104      	bne.n	8001d66 <HAL_TIM_OC_Start+0x9a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2240      	movs	r2, #64	; 0x40
 8001d60:	2102      	movs	r1, #2
 8001d62:	5499      	strb	r1, [r3, r2]
 8001d64:	e003      	b.n	8001d6e <HAL_TIM_OC_Start+0xa2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2241      	movs	r2, #65	; 0x41
 8001d6a:	2102      	movs	r1, #2
 8001d6c:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6839      	ldr	r1, [r7, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 fe78 	bl	8002a6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a29      	ldr	r2, [pc, #164]	; (8001e28 <HAL_TIM_OC_Start+0x15c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00e      	beq.n	8001da4 <HAL_TIM_OC_Start+0xd8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a28      	ldr	r2, [pc, #160]	; (8001e2c <HAL_TIM_OC_Start+0x160>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_TIM_OC_Start+0xd8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_TIM_OC_Start+0x164>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d004      	beq.n	8001da4 <HAL_TIM_OC_Start+0xd8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <HAL_TIM_OC_Start+0x168>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_TIM_OC_Start+0xdc>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <HAL_TIM_OC_Start+0xde>
 8001da8:	2300      	movs	r3, #0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d008      	beq.n	8001dc0 <HAL_TIM_OC_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	0209      	lsls	r1, r1, #8
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <HAL_TIM_OC_Start+0x15c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00f      	beq.n	8001dea <HAL_TIM_OC_Start+0x11e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	05db      	lsls	r3, r3, #23
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d009      	beq.n	8001dea <HAL_TIM_OC_Start+0x11e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <HAL_TIM_OC_Start+0x16c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d004      	beq.n	8001dea <HAL_TIM_OC_Start+0x11e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <HAL_TIM_OC_Start+0x160>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d111      	bne.n	8001e0e <HAL_TIM_OC_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2207      	movs	r2, #7
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d010      	beq.n	8001e1e <HAL_TIM_OC_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	e007      	b.n	8001e1e <HAL_TIM_OC_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b004      	add	sp, #16
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	40014000 	.word	0x40014000
 8001e30:	40014400 	.word	0x40014400
 8001e34:	40014800 	.word	0x40014800
 8001e38:	40000400 	.word	0x40000400

08001e3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e042      	b.n	8001ed4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	223d      	movs	r2, #61	; 0x3d
 8001e52:	5c9b      	ldrb	r3, [r3, r2]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d107      	bne.n	8001e6a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	223c      	movs	r2, #60	; 0x3c
 8001e5e:	2100      	movs	r1, #0
 8001e60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	0018      	movs	r0, r3
 8001e66:	f000 f839 	bl	8001edc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	223d      	movs	r2, #61	; 0x3d
 8001e6e:	2102      	movs	r1, #2
 8001e70:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	0010      	movs	r0, r2
 8001e7e:	f000 fadf 	bl	8002440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2246      	movs	r2, #70	; 0x46
 8001e86:	2101      	movs	r1, #1
 8001e88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	223e      	movs	r2, #62	; 0x3e
 8001e8e:	2101      	movs	r1, #1
 8001e90:	5499      	strb	r1, [r3, r2]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	223f      	movs	r2, #63	; 0x3f
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2240      	movs	r2, #64	; 0x40
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	5499      	strb	r1, [r3, r2]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2241      	movs	r2, #65	; 0x41
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2242      	movs	r2, #66	; 0x42
 8001eae:	2101      	movs	r1, #1
 8001eb0:	5499      	strb	r1, [r3, r2]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2243      	movs	r2, #67	; 0x43
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	5499      	strb	r1, [r3, r2]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2244      	movs	r2, #68	; 0x44
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2245      	movs	r2, #69	; 0x45
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	223d      	movs	r2, #61	; 0x3d
 8001ece:	2101      	movs	r1, #1
 8001ed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b002      	add	sp, #8
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d108      	bne.n	8001f0e <HAL_TIM_PWM_Start+0x22>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	223e      	movs	r2, #62	; 0x3e
 8001f00:	5c9b      	ldrb	r3, [r3, r2]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	1e5a      	subs	r2, r3, #1
 8001f08:	4193      	sbcs	r3, r2
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	e01f      	b.n	8001f4e <HAL_TIM_PWM_Start+0x62>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d108      	bne.n	8001f26 <HAL_TIM_PWM_Start+0x3a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	223f      	movs	r2, #63	; 0x3f
 8001f18:	5c9b      	ldrb	r3, [r3, r2]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	1e5a      	subs	r2, r3, #1
 8001f20:	4193      	sbcs	r3, r2
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	e013      	b.n	8001f4e <HAL_TIM_PWM_Start+0x62>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d108      	bne.n	8001f3e <HAL_TIM_PWM_Start+0x52>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2240      	movs	r2, #64	; 0x40
 8001f30:	5c9b      	ldrb	r3, [r3, r2]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	1e5a      	subs	r2, r3, #1
 8001f38:	4193      	sbcs	r3, r2
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	e007      	b.n	8001f4e <HAL_TIM_PWM_Start+0x62>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2241      	movs	r2, #65	; 0x41
 8001f42:	5c9b      	ldrb	r3, [r3, r2]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	4193      	sbcs	r3, r2
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e074      	b.n	8002040 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d104      	bne.n	8001f66 <HAL_TIM_PWM_Start+0x7a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	223e      	movs	r2, #62	; 0x3e
 8001f60:	2102      	movs	r1, #2
 8001f62:	5499      	strb	r1, [r3, r2]
 8001f64:	e013      	b.n	8001f8e <HAL_TIM_PWM_Start+0xa2>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d104      	bne.n	8001f76 <HAL_TIM_PWM_Start+0x8a>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	223f      	movs	r2, #63	; 0x3f
 8001f70:	2102      	movs	r1, #2
 8001f72:	5499      	strb	r1, [r3, r2]
 8001f74:	e00b      	b.n	8001f8e <HAL_TIM_PWM_Start+0xa2>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d104      	bne.n	8001f86 <HAL_TIM_PWM_Start+0x9a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	2102      	movs	r1, #2
 8001f82:	5499      	strb	r1, [r3, r2]
 8001f84:	e003      	b.n	8001f8e <HAL_TIM_PWM_Start+0xa2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2241      	movs	r2, #65	; 0x41
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 fd68 	bl	8002a6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a29      	ldr	r2, [pc, #164]	; (8002048 <HAL_TIM_PWM_Start+0x15c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_TIM_PWM_Start+0xd8>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a28      	ldr	r2, [pc, #160]	; (800204c <HAL_TIM_PWM_Start+0x160>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_TIM_PWM_Start+0xd8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a26      	ldr	r2, [pc, #152]	; (8002050 <HAL_TIM_PWM_Start+0x164>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d004      	beq.n	8001fc4 <HAL_TIM_PWM_Start+0xd8>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a25      	ldr	r2, [pc, #148]	; (8002054 <HAL_TIM_PWM_Start+0x168>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_TIM_PWM_Start+0xdc>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_TIM_PWM_Start+0xde>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d008      	beq.n	8001fe0 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2180      	movs	r1, #128	; 0x80
 8001fda:	0209      	lsls	r1, r1, #8
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a18      	ldr	r2, [pc, #96]	; (8002048 <HAL_TIM_PWM_Start+0x15c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00f      	beq.n	800200a <HAL_TIM_PWM_Start+0x11e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	05db      	lsls	r3, r3, #23
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d009      	beq.n	800200a <HAL_TIM_PWM_Start+0x11e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a17      	ldr	r2, [pc, #92]	; (8002058 <HAL_TIM_PWM_Start+0x16c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d004      	beq.n	800200a <HAL_TIM_PWM_Start+0x11e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_TIM_PWM_Start+0x160>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d111      	bne.n	800202e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2207      	movs	r2, #7
 8002012:	4013      	ands	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b06      	cmp	r3, #6
 800201a:	d010      	beq.n	800203e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2101      	movs	r1, #1
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800202c:	e007      	b.n	800203e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b004      	add	sp, #16
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40012c00 	.word	0x40012c00
 800204c:	40014000 	.word	0x40014000
 8002050:	40014400 	.word	0x40014400
 8002054:	40014800 	.word	0x40014800
 8002058:	40000400 	.word	0x40000400

0800205c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002068:	2317      	movs	r3, #23
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	223c      	movs	r2, #60	; 0x3c
 8002074:	5c9b      	ldrb	r3, [r3, r2]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_TIM_OC_ConfigChannel+0x22>
 800207a:	2302      	movs	r3, #2
 800207c:	e042      	b.n	8002104 <HAL_TIM_OC_ConfigChannel+0xa8>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	223c      	movs	r2, #60	; 0x3c
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b0c      	cmp	r3, #12
 800208a:	d027      	beq.n	80020dc <HAL_TIM_OC_ConfigChannel+0x80>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d82c      	bhi.n	80020ec <HAL_TIM_OC_ConfigChannel+0x90>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d019      	beq.n	80020cc <HAL_TIM_OC_ConfigChannel+0x70>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b08      	cmp	r3, #8
 800209c:	d826      	bhi.n	80020ec <HAL_TIM_OC_ConfigChannel+0x90>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_TIM_OC_ConfigChannel+0x50>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d008      	beq.n	80020bc <HAL_TIM_OC_ConfigChannel+0x60>
 80020aa:	e01f      	b.n	80020ec <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	0011      	movs	r1, r2
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 fa43 	bl	8002540 <TIM_OC1_SetConfig>
      break;
 80020ba:	e01c      	b.n	80020f6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	0011      	movs	r1, r2
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fac3 	bl	8002650 <TIM_OC2_SetConfig>
      break;
 80020ca:	e014      	b.n	80020f6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	0011      	movs	r1, r2
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 fb3f 	bl	8002758 <TIM_OC3_SetConfig>
      break;
 80020da:	e00c      	b.n	80020f6 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	0011      	movs	r1, r2
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 fbbd 	bl	8002864 <TIM_OC4_SetConfig>
      break;
 80020ea:	e004      	b.n	80020f6 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80020ec:	2317      	movs	r3, #23
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
      break;
 80020f4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	223c      	movs	r2, #60	; 0x3c
 80020fa:	2100      	movs	r1, #0
 80020fc:	5499      	strb	r1, [r3, r2]

  return status;
 80020fe:	2317      	movs	r3, #23
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	781b      	ldrb	r3, [r3, #0]
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	b006      	add	sp, #24
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2317      	movs	r3, #23
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	223c      	movs	r2, #60	; 0x3c
 8002124:	5c9b      	ldrb	r3, [r3, r2]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_TIM_PWM_ConfigChannel+0x22>
 800212a:	2302      	movs	r3, #2
 800212c:	e0ad      	b.n	800228a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	223c      	movs	r2, #60	; 0x3c
 8002132:	2101      	movs	r1, #1
 8002134:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b0c      	cmp	r3, #12
 800213a:	d100      	bne.n	800213e <HAL_TIM_PWM_ConfigChannel+0x32>
 800213c:	e076      	b.n	800222c <HAL_TIM_PWM_ConfigChannel+0x120>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d900      	bls.n	8002146 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002144:	e095      	b.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d04e      	beq.n	80021ea <HAL_TIM_PWM_ConfigChannel+0xde>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b08      	cmp	r3, #8
 8002150:	d900      	bls.n	8002154 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002152:	e08e      	b.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x56>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b04      	cmp	r3, #4
 800215e:	d021      	beq.n	80021a4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002160:	e087      	b.n	8002272 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	0011      	movs	r1, r2
 800216a:	0018      	movs	r0, r3
 800216c:	f000 f9e8 	bl	8002540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2108      	movs	r1, #8
 800217c:	430a      	orrs	r2, r1
 800217e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2104      	movs	r1, #4
 800218c:	438a      	bics	r2, r1
 800218e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6999      	ldr	r1, [r3, #24]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	619a      	str	r2, [r3, #24]
      break;
 80021a2:	e06b      	b.n	800227c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	0011      	movs	r1, r2
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 fa4f 	bl	8002650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	0109      	lsls	r1, r1, #4
 80021c0:	430a      	orrs	r2, r1
 80021c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4931      	ldr	r1, [pc, #196]	; (8002294 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6999      	ldr	r1, [r3, #24]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	021a      	lsls	r2, r3, #8
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	619a      	str	r2, [r3, #24]
      break;
 80021e8:	e048      	b.n	800227c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	0011      	movs	r1, r2
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 fab0 	bl	8002758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69da      	ldr	r2, [r3, #28]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2108      	movs	r1, #8
 8002204:	430a      	orrs	r2, r1
 8002206:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	69da      	ldr	r2, [r3, #28]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2104      	movs	r1, #4
 8002214:	438a      	bics	r2, r1
 8002216:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69d9      	ldr	r1, [r3, #28]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	61da      	str	r2, [r3, #28]
      break;
 800222a:	e027      	b.n	800227c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	0011      	movs	r1, r2
 8002234:	0018      	movs	r0, r3
 8002236:	f000 fb15 	bl	8002864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0109      	lsls	r1, r1, #4
 8002248:	430a      	orrs	r2, r1
 800224a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	490f      	ldr	r1, [pc, #60]	; (8002294 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002258:	400a      	ands	r2, r1
 800225a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69d9      	ldr	r1, [r3, #28]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	021a      	lsls	r2, r3, #8
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	61da      	str	r2, [r3, #28]
      break;
 8002270:	e004      	b.n	800227c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002272:	2317      	movs	r3, #23
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
      break;
 800227a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	223c      	movs	r2, #60	; 0x3c
 8002280:	2100      	movs	r1, #0
 8002282:	5499      	strb	r1, [r3, r2]

  return status;
 8002284:	2317      	movs	r3, #23
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	781b      	ldrb	r3, [r3, #0]
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b006      	add	sp, #24
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	fffffbff 	.word	0xfffffbff

08002298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a2:	230f      	movs	r3, #15
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	223c      	movs	r2, #60	; 0x3c
 80022ae:	5c9b      	ldrb	r3, [r3, r2]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_TIM_ConfigClockSource+0x20>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e0bc      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x19a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	223c      	movs	r2, #60	; 0x3c
 80022bc:	2101      	movs	r1, #1
 80022be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	223d      	movs	r2, #61	; 0x3d
 80022c4:	2102      	movs	r1, #2
 80022c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2277      	movs	r2, #119	; 0x77
 80022d4:	4393      	bics	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4a58      	ldr	r2, [pc, #352]	; (800243c <HAL_TIM_ConfigClockSource+0x1a4>)
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	0192      	lsls	r2, r2, #6
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d040      	beq.n	8002376 <HAL_TIM_ConfigClockSource+0xde>
 80022f4:	2280      	movs	r2, #128	; 0x80
 80022f6:	0192      	lsls	r2, r2, #6
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d900      	bls.n	80022fe <HAL_TIM_ConfigClockSource+0x66>
 80022fc:	e088      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x178>
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	0152      	lsls	r2, r2, #5
 8002302:	4293      	cmp	r3, r2
 8002304:	d100      	bne.n	8002308 <HAL_TIM_ConfigClockSource+0x70>
 8002306:	e088      	b.n	800241a <HAL_TIM_ConfigClockSource+0x182>
 8002308:	2280      	movs	r2, #128	; 0x80
 800230a:	0152      	lsls	r2, r2, #5
 800230c:	4293      	cmp	r3, r2
 800230e:	d900      	bls.n	8002312 <HAL_TIM_ConfigClockSource+0x7a>
 8002310:	e07e      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x178>
 8002312:	2b70      	cmp	r3, #112	; 0x70
 8002314:	d018      	beq.n	8002348 <HAL_TIM_ConfigClockSource+0xb0>
 8002316:	d900      	bls.n	800231a <HAL_TIM_ConfigClockSource+0x82>
 8002318:	e07a      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x178>
 800231a:	2b60      	cmp	r3, #96	; 0x60
 800231c:	d04f      	beq.n	80023be <HAL_TIM_ConfigClockSource+0x126>
 800231e:	d900      	bls.n	8002322 <HAL_TIM_ConfigClockSource+0x8a>
 8002320:	e076      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x178>
 8002322:	2b50      	cmp	r3, #80	; 0x50
 8002324:	d03b      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x106>
 8002326:	d900      	bls.n	800232a <HAL_TIM_ConfigClockSource+0x92>
 8002328:	e072      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x178>
 800232a:	2b40      	cmp	r3, #64	; 0x40
 800232c:	d057      	beq.n	80023de <HAL_TIM_ConfigClockSource+0x146>
 800232e:	d900      	bls.n	8002332 <HAL_TIM_ConfigClockSource+0x9a>
 8002330:	e06e      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x178>
 8002332:	2b30      	cmp	r3, #48	; 0x30
 8002334:	d063      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x166>
 8002336:	d86b      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x178>
 8002338:	2b20      	cmp	r3, #32
 800233a:	d060      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x166>
 800233c:	d868      	bhi.n	8002410 <HAL_TIM_ConfigClockSource+0x178>
 800233e:	2b00      	cmp	r3, #0
 8002340:	d05d      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x166>
 8002342:	2b10      	cmp	r3, #16
 8002344:	d05b      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x166>
 8002346:	e063      	b.n	8002410 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	6899      	ldr	r1, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f000 fb68 	bl	8002a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2277      	movs	r2, #119	; 0x77
 8002368:	4313      	orrs	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	609a      	str	r2, [r3, #8]
      break;
 8002374:	e052      	b.n	800241c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6899      	ldr	r1, [r3, #8]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f000 fb51 	bl	8002a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2180      	movs	r1, #128	; 0x80
 8002396:	01c9      	lsls	r1, r1, #7
 8002398:	430a      	orrs	r2, r1
 800239a:	609a      	str	r2, [r3, #8]
      break;
 800239c:	e03e      	b.n	800241c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	001a      	movs	r2, r3
 80023ac:	f000 fac4 	bl	8002938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2150      	movs	r1, #80	; 0x50
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 fb1e 	bl	80029f8 <TIM_ITRx_SetConfig>
      break;
 80023bc:	e02e      	b.n	800241c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	001a      	movs	r2, r3
 80023cc:	f000 fae2 	bl	8002994 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2160      	movs	r1, #96	; 0x60
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 fb0e 	bl	80029f8 <TIM_ITRx_SetConfig>
      break;
 80023dc:	e01e      	b.n	800241c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	001a      	movs	r2, r3
 80023ec:	f000 faa4 	bl	8002938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2140      	movs	r1, #64	; 0x40
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 fafe 	bl	80029f8 <TIM_ITRx_SetConfig>
      break;
 80023fc:	e00e      	b.n	800241c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0019      	movs	r1, r3
 8002408:	0010      	movs	r0, r2
 800240a:	f000 faf5 	bl	80029f8 <TIM_ITRx_SetConfig>
      break;
 800240e:	e005      	b.n	800241c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002410:	230f      	movs	r3, #15
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
      break;
 8002418:	e000      	b.n	800241c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800241a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	223d      	movs	r2, #61	; 0x3d
 8002420:	2101      	movs	r1, #1
 8002422:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	223c      	movs	r2, #60	; 0x3c
 8002428:	2100      	movs	r1, #0
 800242a:	5499      	strb	r1, [r3, r2]

  return status;
 800242c:	230f      	movs	r3, #15
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	781b      	ldrb	r3, [r3, #0]
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b004      	add	sp, #16
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	ffff00ff 	.word	0xffff00ff

08002440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a34      	ldr	r2, [pc, #208]	; (8002524 <TIM_Base_SetConfig+0xe4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d008      	beq.n	800246a <TIM_Base_SetConfig+0x2a>
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	05db      	lsls	r3, r3, #23
 800245e:	429a      	cmp	r2, r3
 8002460:	d003      	beq.n	800246a <TIM_Base_SetConfig+0x2a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a30      	ldr	r2, [pc, #192]	; (8002528 <TIM_Base_SetConfig+0xe8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d108      	bne.n	800247c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2270      	movs	r2, #112	; 0x70
 800246e:	4393      	bics	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a29      	ldr	r2, [pc, #164]	; (8002524 <TIM_Base_SetConfig+0xe4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d018      	beq.n	80024b6 <TIM_Base_SetConfig+0x76>
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	05db      	lsls	r3, r3, #23
 800248a:	429a      	cmp	r2, r3
 800248c:	d013      	beq.n	80024b6 <TIM_Base_SetConfig+0x76>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a25      	ldr	r2, [pc, #148]	; (8002528 <TIM_Base_SetConfig+0xe8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00f      	beq.n	80024b6 <TIM_Base_SetConfig+0x76>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a24      	ldr	r2, [pc, #144]	; (800252c <TIM_Base_SetConfig+0xec>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00b      	beq.n	80024b6 <TIM_Base_SetConfig+0x76>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a23      	ldr	r2, [pc, #140]	; (8002530 <TIM_Base_SetConfig+0xf0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <TIM_Base_SetConfig+0x76>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a22      	ldr	r2, [pc, #136]	; (8002534 <TIM_Base_SetConfig+0xf4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d003      	beq.n	80024b6 <TIM_Base_SetConfig+0x76>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a21      	ldr	r2, [pc, #132]	; (8002538 <TIM_Base_SetConfig+0xf8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d108      	bne.n	80024c8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4a20      	ldr	r2, [pc, #128]	; (800253c <TIM_Base_SetConfig+0xfc>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2280      	movs	r2, #128	; 0x80
 80024cc:	4393      	bics	r3, r2
 80024ce:	001a      	movs	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a0c      	ldr	r2, [pc, #48]	; (8002524 <TIM_Base_SetConfig+0xe4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00b      	beq.n	800250e <TIM_Base_SetConfig+0xce>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <TIM_Base_SetConfig+0xf0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d007      	beq.n	800250e <TIM_Base_SetConfig+0xce>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <TIM_Base_SetConfig+0xf4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d003      	beq.n	800250e <TIM_Base_SetConfig+0xce>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <TIM_Base_SetConfig+0xf8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d103      	bne.n	8002516 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	615a      	str	r2, [r3, #20]
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b004      	add	sp, #16
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40012c00 	.word	0x40012c00
 8002528:	40000400 	.word	0x40000400
 800252c:	40002000 	.word	0x40002000
 8002530:	40014000 	.word	0x40014000
 8002534:	40014400 	.word	0x40014400
 8002538:	40014800 	.word	0x40014800
 800253c:	fffffcff 	.word	0xfffffcff

08002540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	2201      	movs	r2, #1
 8002550:	4393      	bics	r3, r2
 8002552:	001a      	movs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2270      	movs	r2, #112	; 0x70
 800256e:	4393      	bics	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2203      	movs	r2, #3
 8002576:	4393      	bics	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2202      	movs	r2, #2
 8002588:	4393      	bics	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a27      	ldr	r2, [pc, #156]	; (8002638 <TIM_OC1_SetConfig+0xf8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00b      	beq.n	80025b6 <TIM_OC1_SetConfig+0x76>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a26      	ldr	r2, [pc, #152]	; (800263c <TIM_OC1_SetConfig+0xfc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d007      	beq.n	80025b6 <TIM_OC1_SetConfig+0x76>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a25      	ldr	r2, [pc, #148]	; (8002640 <TIM_OC1_SetConfig+0x100>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d003      	beq.n	80025b6 <TIM_OC1_SetConfig+0x76>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a24      	ldr	r2, [pc, #144]	; (8002644 <TIM_OC1_SetConfig+0x104>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d10c      	bne.n	80025d0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2208      	movs	r2, #8
 80025ba:	4393      	bics	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2204      	movs	r2, #4
 80025cc:	4393      	bics	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a19      	ldr	r2, [pc, #100]	; (8002638 <TIM_OC1_SetConfig+0xf8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00b      	beq.n	80025f0 <TIM_OC1_SetConfig+0xb0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a18      	ldr	r2, [pc, #96]	; (800263c <TIM_OC1_SetConfig+0xfc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d007      	beq.n	80025f0 <TIM_OC1_SetConfig+0xb0>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a17      	ldr	r2, [pc, #92]	; (8002640 <TIM_OC1_SetConfig+0x100>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d003      	beq.n	80025f0 <TIM_OC1_SetConfig+0xb0>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a16      	ldr	r2, [pc, #88]	; (8002644 <TIM_OC1_SetConfig+0x104>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d111      	bne.n	8002614 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <TIM_OC1_SetConfig+0x108>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4a14      	ldr	r2, [pc, #80]	; (800264c <TIM_OC1_SetConfig+0x10c>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	621a      	str	r2, [r3, #32]
}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b006      	add	sp, #24
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	40012c00 	.word	0x40012c00
 800263c:	40014000 	.word	0x40014000
 8002640:	40014400 	.word	0x40014400
 8002644:	40014800 	.word	0x40014800
 8002648:	fffffeff 	.word	0xfffffeff
 800264c:	fffffdff 	.word	0xfffffdff

08002650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	2210      	movs	r2, #16
 8002660:	4393      	bics	r3, r2
 8002662:	001a      	movs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4a2e      	ldr	r2, [pc, #184]	; (8002738 <TIM_OC2_SetConfig+0xe8>)
 800267e:	4013      	ands	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a2d      	ldr	r2, [pc, #180]	; (800273c <TIM_OC2_SetConfig+0xec>)
 8002686:	4013      	ands	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2220      	movs	r2, #32
 800269a:	4393      	bics	r3, r2
 800269c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a24      	ldr	r2, [pc, #144]	; (8002740 <TIM_OC2_SetConfig+0xf0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d10d      	bne.n	80026ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	4393      	bics	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2240      	movs	r2, #64	; 0x40
 80026ca:	4393      	bics	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <TIM_OC2_SetConfig+0xf0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00b      	beq.n	80026ee <TIM_OC2_SetConfig+0x9e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <TIM_OC2_SetConfig+0xf4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <TIM_OC2_SetConfig+0x9e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <TIM_OC2_SetConfig+0xf8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d003      	beq.n	80026ee <TIM_OC2_SetConfig+0x9e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a18      	ldr	r2, [pc, #96]	; (800274c <TIM_OC2_SetConfig+0xfc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d113      	bne.n	8002716 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4a17      	ldr	r2, [pc, #92]	; (8002750 <TIM_OC2_SetConfig+0x100>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4a16      	ldr	r2, [pc, #88]	; (8002754 <TIM_OC2_SetConfig+0x104>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	621a      	str	r2, [r3, #32]
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b006      	add	sp, #24
 8002736:	bd80      	pop	{r7, pc}
 8002738:	ffff8fff 	.word	0xffff8fff
 800273c:	fffffcff 	.word	0xfffffcff
 8002740:	40012c00 	.word	0x40012c00
 8002744:	40014000 	.word	0x40014000
 8002748:	40014400 	.word	0x40014400
 800274c:	40014800 	.word	0x40014800
 8002750:	fffffbff 	.word	0xfffffbff
 8002754:	fffff7ff 	.word	0xfffff7ff

08002758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a35      	ldr	r2, [pc, #212]	; (800283c <TIM_OC3_SetConfig+0xe4>)
 8002768:	401a      	ands	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2270      	movs	r2, #112	; 0x70
 8002784:	4393      	bics	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2203      	movs	r2, #3
 800278c:	4393      	bics	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4a28      	ldr	r2, [pc, #160]	; (8002840 <TIM_OC3_SetConfig+0xe8>)
 800279e:	4013      	ands	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a24      	ldr	r2, [pc, #144]	; (8002844 <TIM_OC3_SetConfig+0xec>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10d      	bne.n	80027d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	4a23      	ldr	r2, [pc, #140]	; (8002848 <TIM_OC3_SetConfig+0xf0>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	4a1f      	ldr	r2, [pc, #124]	; (800284c <TIM_OC3_SetConfig+0xf4>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <TIM_OC3_SetConfig+0xec>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00b      	beq.n	80027f2 <TIM_OC3_SetConfig+0x9a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <TIM_OC3_SetConfig+0xf8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <TIM_OC3_SetConfig+0x9a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <TIM_OC3_SetConfig+0xfc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d003      	beq.n	80027f2 <TIM_OC3_SetConfig+0x9a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <TIM_OC3_SetConfig+0x100>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d113      	bne.n	800281a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4a19      	ldr	r2, [pc, #100]	; (800285c <TIM_OC3_SetConfig+0x104>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4a18      	ldr	r2, [pc, #96]	; (8002860 <TIM_OC3_SetConfig+0x108>)
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	621a      	str	r2, [r3, #32]
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b006      	add	sp, #24
 800283a:	bd80      	pop	{r7, pc}
 800283c:	fffffeff 	.word	0xfffffeff
 8002840:	fffffdff 	.word	0xfffffdff
 8002844:	40012c00 	.word	0x40012c00
 8002848:	fffff7ff 	.word	0xfffff7ff
 800284c:	fffffbff 	.word	0xfffffbff
 8002850:	40014000 	.word	0x40014000
 8002854:	40014400 	.word	0x40014400
 8002858:	40014800 	.word	0x40014800
 800285c:	ffffefff 	.word	0xffffefff
 8002860:	ffffdfff 	.word	0xffffdfff

08002864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a28      	ldr	r2, [pc, #160]	; (8002914 <TIM_OC4_SetConfig+0xb0>)
 8002874:	401a      	ands	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a22      	ldr	r2, [pc, #136]	; (8002918 <TIM_OC4_SetConfig+0xb4>)
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a21      	ldr	r2, [pc, #132]	; (800291c <TIM_OC4_SetConfig+0xb8>)
 8002898:	4013      	ands	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <TIM_OC4_SetConfig+0xbc>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	031b      	lsls	r3, r3, #12
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a19      	ldr	r2, [pc, #100]	; (8002924 <TIM_OC4_SetConfig+0xc0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00b      	beq.n	80028dc <TIM_OC4_SetConfig+0x78>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a18      	ldr	r2, [pc, #96]	; (8002928 <TIM_OC4_SetConfig+0xc4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d007      	beq.n	80028dc <TIM_OC4_SetConfig+0x78>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a17      	ldr	r2, [pc, #92]	; (800292c <TIM_OC4_SetConfig+0xc8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <TIM_OC4_SetConfig+0x78>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a16      	ldr	r2, [pc, #88]	; (8002930 <TIM_OC4_SetConfig+0xcc>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d109      	bne.n	80028f0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	4a15      	ldr	r2, [pc, #84]	; (8002934 <TIM_OC4_SetConfig+0xd0>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	621a      	str	r2, [r3, #32]
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b006      	add	sp, #24
 8002910:	bd80      	pop	{r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	ffffefff 	.word	0xffffefff
 8002918:	ffff8fff 	.word	0xffff8fff
 800291c:	fffffcff 	.word	0xfffffcff
 8002920:	ffffdfff 	.word	0xffffdfff
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40014000 	.word	0x40014000
 800292c:	40014400 	.word	0x40014400
 8002930:	40014800 	.word	0x40014800
 8002934:	ffffbfff 	.word	0xffffbfff

08002938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	2201      	movs	r2, #1
 8002950:	4393      	bics	r3, r2
 8002952:	001a      	movs	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	22f0      	movs	r2, #240	; 0xf0
 8002962:	4393      	bics	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	220a      	movs	r2, #10
 8002974:	4393      	bics	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	621a      	str	r2, [r3, #32]
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b006      	add	sp, #24
 8002992:	bd80      	pop	{r7, pc}

08002994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	2210      	movs	r2, #16
 80029a6:	4393      	bics	r3, r2
 80029a8:	001a      	movs	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <TIM_TI2_ConfigInputStage+0x60>)
 80029be:	4013      	ands	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	031b      	lsls	r3, r3, #12
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	22a0      	movs	r2, #160	; 0xa0
 80029d0:	4393      	bics	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	621a      	str	r2, [r3, #32]
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b006      	add	sp, #24
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	ffff0fff 	.word	0xffff0fff

080029f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2270      	movs	r2, #112	; 0x70
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	2207      	movs	r2, #7
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	609a      	str	r2, [r3, #8]
}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b004      	add	sp, #16
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <TIM_ETR_SetConfig+0x3c>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	021a      	lsls	r2, r3, #8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b006      	add	sp, #24
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	ffff00ff 	.word	0xffff00ff

08002a6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	221f      	movs	r2, #31
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2201      	movs	r2, #1
 8002a80:	409a      	lsls	r2, r3
 8002a82:	0013      	movs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	43d2      	mvns	r2, r2
 8002a8e:	401a      	ands	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a1a      	ldr	r2, [r3, #32]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	211f      	movs	r1, #31
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4099      	lsls	r1, r3
 8002aa2:	000b      	movs	r3, r1
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	621a      	str	r2, [r3, #32]
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b006      	add	sp, #24
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	223c      	movs	r2, #60	; 0x3c
 8002ac2:	5c9b      	ldrb	r3, [r3, r2]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e047      	b.n	8002b5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	223c      	movs	r2, #60	; 0x3c
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	223d      	movs	r2, #61	; 0x3d
 8002ad8:	2102      	movs	r1, #2
 8002ada:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2270      	movs	r2, #112	; 0x70
 8002af0:	4393      	bics	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a16      	ldr	r2, [pc, #88]	; (8002b64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00f      	beq.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	05db      	lsls	r3, r3, #23
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d009      	beq.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a10      	ldr	r2, [pc, #64]	; (8002b6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d10c      	bne.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	4393      	bics	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223d      	movs	r2, #61	; 0x3d
 8002b4e:	2101      	movs	r1, #1
 8002b50:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	223c      	movs	r2, #60	; 0x3c
 8002b56:	2100      	movs	r1, #0
 8002b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b004      	add	sp, #16
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40014000 	.word	0x40014000

08002b70 <__libc_init_array>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	2600      	movs	r6, #0
 8002b74:	4d0c      	ldr	r5, [pc, #48]	; (8002ba8 <__libc_init_array+0x38>)
 8002b76:	4c0d      	ldr	r4, [pc, #52]	; (8002bac <__libc_init_array+0x3c>)
 8002b78:	1b64      	subs	r4, r4, r5
 8002b7a:	10a4      	asrs	r4, r4, #2
 8002b7c:	42a6      	cmp	r6, r4
 8002b7e:	d109      	bne.n	8002b94 <__libc_init_array+0x24>
 8002b80:	2600      	movs	r6, #0
 8002b82:	f000 f821 	bl	8002bc8 <_init>
 8002b86:	4d0a      	ldr	r5, [pc, #40]	; (8002bb0 <__libc_init_array+0x40>)
 8002b88:	4c0a      	ldr	r4, [pc, #40]	; (8002bb4 <__libc_init_array+0x44>)
 8002b8a:	1b64      	subs	r4, r4, r5
 8002b8c:	10a4      	asrs	r4, r4, #2
 8002b8e:	42a6      	cmp	r6, r4
 8002b90:	d105      	bne.n	8002b9e <__libc_init_array+0x2e>
 8002b92:	bd70      	pop	{r4, r5, r6, pc}
 8002b94:	00b3      	lsls	r3, r6, #2
 8002b96:	58eb      	ldr	r3, [r5, r3]
 8002b98:	4798      	blx	r3
 8002b9a:	3601      	adds	r6, #1
 8002b9c:	e7ee      	b.n	8002b7c <__libc_init_array+0xc>
 8002b9e:	00b3      	lsls	r3, r6, #2
 8002ba0:	58eb      	ldr	r3, [r5, r3]
 8002ba2:	4798      	blx	r3
 8002ba4:	3601      	adds	r6, #1
 8002ba6:	e7f2      	b.n	8002b8e <__libc_init_array+0x1e>
 8002ba8:	08002c10 	.word	0x08002c10
 8002bac:	08002c10 	.word	0x08002c10
 8002bb0:	08002c10 	.word	0x08002c10
 8002bb4:	08002c14 	.word	0x08002c14

08002bb8 <memset>:
 8002bb8:	0003      	movs	r3, r0
 8002bba:	1882      	adds	r2, r0, r2
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <memset+0xa>
 8002bc0:	4770      	bx	lr
 8002bc2:	7019      	strb	r1, [r3, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	e7f9      	b.n	8002bbc <memset+0x4>

08002bc8 <_init>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bce:	bc08      	pop	{r3}
 8002bd0:	469e      	mov	lr, r3
 8002bd2:	4770      	bx	lr

08002bd4 <_fini>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr
